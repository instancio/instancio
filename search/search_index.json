{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"articles/","title":"Articles","text":"<p>Here you will find articles that focus on specific topics. These are intended as \"how-tos\" with code snippets that can be copy/pasted. Some of the information here may overlap with the user guide.</p> <ul> <li>Using Instancio with JUnit 5</li> <li>How to override default settings</li> <li>Creating object templates using Models</li> </ul>"},{"location":"building/","title":"Building From Sources","text":"<p>Instancio is packaged as a multi-release JAR. It can be used with Java 8 or higher. Building Instancio from sources requires JDK 24 or higher:</p> <pre><code>git clone https://github.com/instancio/instancio.git\ncd instancio\nmvn verify\n</code></pre> <p>Currently, IntelliJ IDEA does not support multi-release projects very well (see IDEA-168946).</p> <p>If you encounter module-related errors when importing the project into the IDE, apply the following changes to all highlighted modules. Go to <code>File -&gt; Project Structure</code>:</p> <ul> <li>set the Language level to Java 8</li> <li>exclude <code>module-info.java</code></li> </ul> <p>Note</p> <p>These changes are not permanent. If IntelliJ reloads Maven modules, these changes will be lost and will need to be set again.</p> <p></p>"},{"location":"building/#building-the-website","title":"Building the Website","text":"<p>This site is built using MkDocs and MkDocs Material theme.</p> <p>To build the site, you will need the following Python packages:</p> <pre><code>pip install mkdocs \\\n    mkdocs-material \\\n    mkdocs-macros-plugin \\\n    mkdocs-autolinks-plugin \\\n    mkdocs-minify-html-plugin\n</code></pre> <p>To run the site locally: <code>cd website &amp;&amp; mkdocs serve</code>. To generate static HTML: <code>mkdocs build</code>.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Requirements:</p> <p>Instancio is packaged as a multi-release JAR and can be used with Java 8 or higher.</p> <p>It has a single <code>compile</code> dependency on <code>org.slf4j:slf4j-api</code>.</p> <p>Since version <code>1.5.0</code> Instancio supports creating:</p> <ul> <li><code>java.lang.Record</code> classes on Java 16</li> <li><code>sealed</code> classes on Java 17</li> </ul>"},{"location":"getting-started/#dependencies","title":"Dependencies","text":"<p>The following dependencies are available from Maven central:</p> Dependency JPMS Module Name Description <code>instancio-core</code> <code>org.instancio.core</code> Core library <code>instancio-junit</code> <code>org.instancio.junit</code> JUnit Jupiter integration <code>instancio-guava</code> <code>org.instancio.guava</code> Support for Google Guava <p>The <code>org.instancio:instancio</code> artifact on Maven central is an older dependency that should no longer be used.</p>"},{"location":"getting-started/#instancio-junit","title":"<code>instancio-junit</code>","text":"<p>If you have JUnit 5 on the classpath, then use <code>instancio-junit</code>.</p> <p>It includes a transitive dependency on <code>instancio-core</code>, therefore it is not necessary to import both.</p> MavenGradle Maven<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.instancio&lt;/groupId&gt;\n    &lt;artifactId&gt;instancio-junit&lt;/artifactId&gt;\n    &lt;version&gt;5.5.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> Gradle<pre><code>dependencies {\n    testImplementation 'org.instancio:instancio-junit:5.5.1'\n}\n</code></pre>"},{"location":"getting-started/#instancio-core","title":"<code>instancio-core</code>","text":"<p>If you use JUnit 4, TestNG, or would like to use Instancio standalone, then use <code>instancio-core</code>:</p> MavenGradle Maven<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.instancio&lt;/groupId&gt;\n    &lt;artifactId&gt;instancio-core&lt;/artifactId&gt;\n    &lt;version&gt;5.5.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> Gradle<pre><code>dependencies {\n    testImplementation 'org.instancio:instancio-core:5.5.1'\n}\n</code></pre>"},{"location":"getting-started/#instancio-guava","title":"<code>instancio-guava</code>","text":"<p>Using <code>instancio-guava</code> requires the following dependencies on the classpath:</p> <ul> <li>either <code>instancio-core</code> or <code>instancio-junit</code></li> <li><code>com.google.guava:guava</code> version <code>23.1-jre</code> or higher</li> </ul>"},{"location":"getting-started/#versioning","title":"Versioning","text":"<p>Instancio version numbers adhere to the <code>MAJOR.MINOR.PATCH</code> format.</p> <ul> <li>Major versions are generally reserved for significant features and breaking changes.</li> <li>Minor and Patch versions include bug fixes, smaller new features,   but may also include minor breaking changes.</li> </ul> <p>In other words, the project does not follow Semantic Versioning, though the versioning scheme loosely resembles it.</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#introduction","title":"Introduction","text":""},{"location":"user-guide/#overview","title":"Overview","text":"<p>Instancio is a Java library for generating test objects. Its main goal is to reduce manual data setup in unit tests. Its API was designed to be as non-intrusive and as concise as possible, while providing enough flexibility to customise generated objects. Instancio requires no changes to production code, and it can be used out-of-the-box with zero configuration.</p>"},{"location":"user-guide/#project-goals","title":"Project Goals","text":"<p>There are several existing libraries for generating realistic test data, such as addresses, first and last names, and so on. While Instancio also supports this use case, this is not its goal. The idea behind the project is that most unit tests do not care what the actual values are. They just require the presence of a value. Therefore, the main goal of Instancio is simply to generate fully populated objects with random data, including arrays, collections, nested collections, generic types, and so on. And it aims to do so with as little code as possible to keep the tests concise.</p> <p>Another goal of Instancio is to make the tests more dynamic. Since each test run is against random values, the tests become alive. They cover a wider range of inputs, which might help uncover bugs that may have gone unnoticed with static data. In many cases, the random nature of the data also removes the need for parameterising test methods.</p> <p>Finally, Instancio aims to provide reproducible data. It uses a consistent seed value for each object graph it generates. Therefore, if a test fails against a given set of inputs, Instancio supports re-generating the same data set in order to reproduce the failed test.</p>"},{"location":"user-guide/#instancio-basics","title":"Instancio Basics","text":""},{"location":"user-guide/#creating-objects","title":"Creating Objects","text":"<p>The Instancio class is the entry point to the API. It provides the following shorthand methods for creating objects. These can be used when defaults suffice and generated values do not need to be customised.</p> Shorthand methods<pre><code>Instancio.create(Class&lt;T&gt; type)\nInstancio.create(TypeTokenSupplier&lt;T&gt; supplier)\nInstancio.create(Model&lt;T&gt; model)\n</code></pre> <p>The following builder methods allow chaining additional method calls in order to customise generated values, ignore certain fields, provide custom settings, and so on.</p> Builder API<pre><code>Instancio.of(Class&lt;T&gt; type).create()\nInstancio.of(TypeTokenSupplier&lt;T&gt; supplier).create()\nInstancio.of(Model&lt;T&gt; model).create()\n</code></pre> <p>The three arguments accepted by these methods can be used for different purposes.</p> <p>1 Creates an instance by specifying a class; this method should suffice in most cases. 2 This method is for creating instances of generic types by supplying a type token. 3 Creates an instance using an Instancio Model, which acts as a template for creating objects (see Using Models).</p> Examples of create() methods<pre><code>// Create by specifying the class\nPerson person = Instancio.create(Person.class);\n\n// Using type tokens\nPair&lt;String, Long&gt; pair = Instancio.create(new TypeToken&lt;Pair&lt;String, Long&gt;&gt;() {});\n\nMap&lt;Integer, List&lt;String&gt;&gt; map = Instancio.create(new TypeToken&lt;Map&lt;Integer, List&lt;String&gt;&gt;&gt;() {});\n\n// Create from a model of person with the age field ignored\nModel&lt;Person&gt; personModel = Instancio.of(Person.class)\n    .ignore(field(Person::getAge))\n    .toModel();\n\n// Create a person from the model, and additionally ignore the address field\nPerson personWithoutAgeAndAddress = Instancio.of(personModel)\n    .ignore(field(Person::getAddress))\n    .create();\n</code></pre> <p>It should be noted that generic types can also be created using <code>Instancio.of(Class)</code> and specifying the type parameters as arguments to the <code>withTypeParameters()</code> method:</p> <pre><code>Pair&lt;String, Long&gt; pair = Instancio.of(Pair.class)\n    .withTypeParameters(String.class, Long.class)\n    .create();\n</code></pre> <p>However, this approach has a couple of drawbacks: it does not support nested generics, and its usage will produce an \"unchecked assignment\" warning.</p>"},{"location":"user-guide/#creating-collections","title":"Creating collections","text":"<p>Collections can be created using one of the following methods. These methods create a collection of random size, between 2 and 6 elements, inclusive:</p> Collections API: using Class<pre><code>Instancio.createList(Class&lt;T&gt; elementType)\nInstancio.createSet(Class&lt;T&gt; elementType)\nInstancio.createMap(Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)\n</code></pre> <p>In addition, there is a builder API for creating a collection of a specified size. The builder API also supports customising properties of collection elements.</p> Collections builder API: using Class<pre><code>Instancio.ofList(Class&lt;T&gt; elementType).create()\nInstancio.ofSet(Class&lt;T&gt; elementType).create()\nInstancio.ofMap(Class&lt;K&gt; keyType, Class&lt;V&gt; valueType).create()\n</code></pre> <p>If the element is a generic type, the following methods can be used instead:</p> Collections builder API: using TypeToken<pre><code>Instancio.ofList(TypeTokenSupplier&lt;T&gt; elementType).create()\nInstancio.ofSet(TypeTokenSupplier&lt;T&gt; elementType).create()\nInstancio.ofMap(TypeTokenSupplier&lt;K&gt; keyType, TypeTokenSupplier&lt;V&gt; valueType).create()\n</code></pre> <p>In addition, <code>ofList()</code> and <code>ofSet()</code> can be used to create collections from models:</p> Collections builder API: using Model<pre><code>Instancio.ofList(Model&lt;T&gt; elementModel).create()\nInstancio.ofSet(Model&lt;T&gt; elementModel).create()\n</code></pre> Examples<pre><code>List&lt;Person&gt; list = Instancio.createList(Person.class);\n\nList&lt;Person&gt; list = Instancio.ofList(Person.class).size(10).create();\n\nList&lt;Pair&lt;String, Integer&gt;&gt; list = Instancio.ofList(new TypeToken&lt;Pair&lt;String, Integer&gt;&gt;() {}).create();\n\nMap&lt;UUID, Address&gt; map = Instancio.ofMap(UUID.class, Address.class).size(3)\n    .set(field(Address::getCity), \"Vancouver\")\n    .create();\n\n// Create from a model\nModel&lt;Person&gt; personModel = Instancio.of(Person.class)\n    .ignore(field(Person::getAge))\n    .toModel();\n\nSet&lt;Person&gt; set = Instancio.ofSet(personModel).size(5).create();\n</code></pre> <p>Specifying the collection size is optional. If no size is specified, a collection of random size (between 2 and 6 inclusive) will be generated.</p>"},{"location":"user-guide/#creating-record-and-sealed-classes","title":"Creating <code>record</code> and <code>sealed</code> Classes","text":"<p>Instancio version <code>1.5.0</code> introduced support for creating</p> <ul> <li><code>record</code> classes when run on Java 16+, and</li> <li><code>sealed</code> classes when run on Java 17+.</li> </ul> <p>This uses the same API as described above for creating regular classes.</p>"},{"location":"user-guide/#creating-a-stream-of-objects","title":"Creating a Stream of Objects","text":"<p>Instancio also provides methods for creating a <code>Stream</code> of objects. The <code>stream()</code> methods return an infinite stream of distinct fully-populated instances. Similarly to the <code>create()</code> methods, these have a shorthand form if no customisations are needed:</p> Shorthand methods<pre><code>Instancio.stream(Class&lt;T&gt; type)\nInstancio.stream(TypeTokenSupplier&lt;T&gt; supplier)\n</code></pre> <p>as well as the builder API that allows customising generated values:</p> Stream Builder API<pre><code>Instancio.of(Class&lt;T&gt; type).stream()\nInstancio.of(TypeTokenSupplier&lt;T&gt; supplier).stream()\n</code></pre> <p>The following are a couple of examples of using streams. Note the calls to <code>limit()</code>, which are required to avoid an infinite loop.</p> Examples of stream() methods<pre><code>List&lt;Person&gt; personList = Instancio.stream(Person.class)\n    .limit(3)\n    .collect(Collectors.toList());\n\nMap&lt;UUID, Person&gt; personMap = Instancio.of(new TypeToken&lt;Person&gt;() {})\n    .ignore(all(field(Person::getAge), field(Person::getAddress)))\n    .stream()\n    .limit(3)\n    .collect(Collectors.toMap(Person::getUuid, Function.identity()));\n</code></pre> <p>Since returned streams are infinite, <code>limit()</code> must be called to avoid an infinite loop.</p>"},{"location":"user-guide/#creating-blank-objects","title":"Creating Blank Objects","text":"<p>Experimental API <code>@since 4.7.0</code></p> <p>In addition to creating fully-populated objects, Instancio provides an API for creating blank objects using the following methods:</p> Shorthand method<pre><code>Instancio.createBlank(Class&lt;T&gt; type)\n</code></pre> Builder API<pre><code>Instancio.ofBlank(Class&lt;T&gt; type).create()\n</code></pre> <p>Blank objects have value fields (such as strings, numbers, dates) set to <code>null</code> and nested POJO references initialised to blank POJOs. The following is a simple example that assumes a <code>Person</code> class with a <code>name</code> and <code>address</code> fields:</p> Examples of creating blank objects<pre><code>Person person = Instancio.createBlank(Person.class);\n\n// Output:\n// Person[name=null, address=Address[street=null, city=null, country=null]]\n\nPerson person = Instancio.ofBlank(Person.class)\n    .set(field(Address::getCountry), \"Canada\")\n    .create();\n\n// Output:\n// Person[name=null, address=Address[street=null, city=null, country=Canada]]\n</code></pre> <p>See the documentation for <code>setBlank(TargetSelector)</code> method for more details on blank objects.</p>"},{"location":"user-guide/#creating-simple-values","title":"Creating Simple Values","text":"<p>Instancio offers the <code>Instancio.gen()</code> method to generate simple value types like strings, numbers, and dates. This method serves as the entry point for accessing built-in generators. All generators available through <code>Instancio.gen()</code> implement the ValueSpec interface, which provides the following methods:</p> Method Description <code>get()</code> generates a single value <code>list(int size)</code> generates a list of values of given size <code>stream()</code> generates an infinite stream of values (requires calling <code>limit()</code>) <code>map(Function)</code> returns the value after applying the function <code>nullable()</code> indicates that a <code>null</code> may be generated Usage examples<pre><code>URL url = Instancio.gen().net().url().get();\n\nURI uri = Instancio.gen().net().uri().nullable().get();\n\nString randomChoice = Instancio.gen().oneOf(\"foo\", \"bar\", \"baz\").get();\n\nList&lt;LocalDate&gt; dates = Instancio.gen().temporal().localDate().future().list(5);\n\nList&lt;String&gt; uuids = Instancio.gen().text().uuid().upperCase().withoutDashes().list(5);\n</code></pre> <p>See Built-in Generators for a list of available generators</p>"},{"location":"user-guide/#populating-existing-objects","title":"Populating Existing Objects","text":"<p>Experimental API <code>@since 5.3.0</code></p> <p>Instancio allows populating existing object instances with randomly generated values using the following method:</p> Shorthand method<pre><code>Instancio.fill(Object)\n</code></pre> <p>This is a <code>void</code> method that modifies the provided object instance. Additionally, the following method offers a builder API for customising how the object is populated:</p> Builder API<pre><code>Instancio.ofObject(Object).fill()\n</code></pre> <p>By default, only fields that are <code>null</code> or primitive fields with default values are populated. Existing non-null fields and primitive fields with non-default values remain unchanged.</p> <p>Consider the following example class (getters and setters omitted for brevity):</p> <pre><code>class Person {\n    private String name;\n    private String email;\n    private LocalDate dateOfBirth;\n}\n</code></pre> <p>Suppose we have a <code>Person</code> instance with some fields already initialized. The remaining fields can be populated as follows:</p> <pre><code>Person person = new Person();\nperson.setDateOfBirth(LocalDate.of(1980, 12, 31));\n\nInstancio.fill(person);\n\n// Sample output:\n// Person[name=VCNSOU email=ONVERFS, dateOfBirth=1980-12-31]\n</code></pre> <p>4,7 The <code>fill()</code> method fills the object with random data while preserving the initialized <code>dateOfBirth</code> field.</p> <p>Similarly, you can use the builder API to customise the generated data:</p> <pre><code>Person person = new Person();\nperson.setDateOfBirth(LocalDate.of(1980, 12, 31));\n\nInstancio.ofObject(person)\n    .generate(field(Person::getEmail), gen -&gt; gen.net().email())\n    .fill();\n\n// Sample output:\n// Person[name=VCNSOU, email=fphna@mph.org, dateOfBirth=1980-12-31]\n</code></pre> <p>4 Use the builder API for populating objects. 5 Customise the <code>email</code> field. 6 Invoke the <code>fill()</code> to fill the object with data.</p> <p>The object being populated must meet the following requirements:</p> <ul> <li>It must not be a parameterized type, except for <code>java.util.Collection</code> or <code>java.util.Map</code>.</li> <li>Collections and maps must not be empty.</li> </ul> <p>While this method can populate fields within elements of a collection, it does not:</p> <ul> <li>Add new elements to the collection.</li> <li>Replace <code>null</code> elements with non-null values.</li> </ul> <p>As a result, initialised collections retain their original size unless explicitly replaced with a new collection instance using a selector.</p>"},{"location":"user-guide/#fill-types","title":"Fill Types","text":"<p>Instancio supports three fill types, represented by the FillType enum:</p> <ul> <li> <p><code>APPLY_SELECTORS</code></p> <p>Populates the object only based on specified selectors. This ensures that only the fields explicitly targeted by selectors are modified. Other fields remain unchanged.</p> </li> <li> <p><code>POPULATE_NULLS</code></p> <p>Populates all <code>null</code> fields with random values and applies any specified selectors. This includes the behaviour of <code>APPLY_SELECTORS</code> and adds population of <code>null</code> fields</p> </li> <li> <p><code>POPULATE_NULLS_AND_DEFAULT_PRIMITIVES</code> (default behaviour)</p> <p>Populates both <code>null</code> fields and primitive fields containing default values. This combines the behaviour of <code>POPULATE_NULLS</code> with additional handling for default primitive values.</p> </li> </ul> <p>The default fill type can be customised in the following ways:</p> <ul> <li>By using the withFillType(FillType) method.</li> <li>Via Settings, using the <code>Keys.FILL_TYPE</code> key.</li> </ul>"},{"location":"user-guide/#selectors","title":"Selectors","text":"<p>Selectors are used to target fields and classes, for example in order to customise generated values. Instancio supports different types of selectors, all of which implement the TargetSelector interface. These types are:</p> <ul> <li>regular selectors</li> <li>method reference selector</li> <li>predicate selectors</li> <li>convenience selectors</li> <li>setter selectors</li> </ul> <p>All selectors can be created using static methods from the Select class.</p> <p>The following examples assume <code>import org.instancio.Select</code></p>"},{"location":"user-guide/#regular-selectors","title":"Regular selectors","text":"<p>Regular selectors are for precise matching: they can only match a single field or a single type.</p> <pre><code>Select.field(String fieldName)\nSelect.field(Class&lt;?&gt; declaringClass, String fieldName)\nSelect.all(Class&lt;?&gt; type)\n</code></pre> <p>1 Selects the field by name, declared in the class being created. 2 Selects the field by name, declared in the specified class. 3 Selects the specified class, including fields and collection elements of this type.</p> Examples<pre><code>Select.field(Person.class, \"name\") // Person.name\nSelect.all(Set.class)\n</code></pre> <p><code>Select.field()</code> is matched based on the exact field name. If a field with the specified name does not exist, an error will be thrown. <code>Select.all()</code> is matched using <code>Class</code> equality, therefore matching does not include subtypes.</p>"},{"location":"user-guide/#method-reference-selector","title":"Method reference selector","text":"<p>This selector uses method references to match fields.</p> <pre><code>Select.field(GetMethodSelector&lt;T, R&gt; methodReference)\n</code></pre> Example<pre><code>Select.field(Person::getName)\n</code></pre> <p>Internally, method reference is converted to a regular field selector, equivalent to <code>Select.field(Class&lt;?&gt; declaringClass, String fieldName)</code>. This is done by mapping the method name to the corresponding field name. The mapping logic supports the following naming conventions:</p> <ul> <li>Java beans - where getters are prefixed with <code>get</code> and, in case of booleans, <code>is</code>.</li> <li>Java record - where method names match field names exactly.</li> </ul> <p>For example, all the following combinations of field and method names are supported:</p> Method name Field name Example <code>getName()</code> <code>name</code> <code>Select.field(Person::getName)</code>  -&gt; <code>Select.field(Person.class, \"name\")</code> <code>name()</code> <code>name</code> <code>Select.field(Person::name)</code>  -&gt; <code>Select.field(Person.class, \"name\")</code> <code>isActive()</code> <code>active</code> <code>Select.field(Person::isActive)</code>  -&gt; <code>Select.field(Person.class, \"active\")</code> <code>isActive()</code> <code>isActive</code> <code>Select.field(Person::isActive)</code>  -&gt; <code>Select.field(Person.class, \"isActive\")</code> <p>For methods that follow other naming conventions, or situations where no method is available, regular field selectors can be used instead.</p> <p>Regular selector definition</p> <p>From here on, the definition of regular selectors also includes method reference selectors.</p>"},{"location":"user-guide/#kotlin-method-reference-selector","title":"Kotlin method reference selector","text":"<p>Since Instancio does not include Kotlin dependencies, the method reference selector described above is only supported for Java classes. If you use Kotlin, a similar selector can be implemented as a simple utility class shown below. This sample assumes that the property has a non-null backing <code>javaField</code>:</p> Sample implementation method reference selector for Kotlin<pre><code>class KSelect {\n    companion object {\n        fun &lt;T, V&gt; field(property: KProperty1&lt;T, V&gt;): TargetSelector {\n            val field = property.javaField!!\n            return Select.field(field.declaringClass, field.name)\n        }\n    }\n}\n\n// Usage: KSelect.field(SamplePojo::value)\n</code></pre>"},{"location":"user-guide/#predicate-selectors","title":"Predicate selectors","text":"<p>Predicate selectors allow for greater flexibility in matching fields and classes. These use a plural naming convention: <code>fields()</code> and <code>types()</code>.</p> <pre><code>Select.fields(Predicate&lt;Field&gt; fieldPredicate)\nSelect.types(Predicate&lt;Class&lt;?&gt;&gt; classPredicate)\n</code></pre> <p>1 Selects all fields matching the predicate. 2 Selects all types matching the predicate.</p> Examples<pre><code>Select.fields(field -&gt; field.getName().contains(\"date\"))\nSelect.types(klass -&gt; Collection.class.isAssignableFrom(klass))\n</code></pre> <p>Unlike regular selectors, these can match multiple fields or types. For example, they can be used to match all fields declared by a class, or all classes within a package. They can also be used to match a certain type, including its subtypes.</p>"},{"location":"user-guide/#convenience-selectors","title":"Convenience selectors","text":"<p>Convenience selectors provide syntactic sugar built on top of regular and predicate selectors.</p> <pre><code>Select.all(GroupableSelector... selectors)\nSelect.allStrings()\nSelect.allInts()\nSelect.fields()\nSelect.types()\nSelect.root()\n</code></pre> <p>1 For combining multiple selectors. 2 Equivalent to <code>Select.all(String.class)</code>. 3 Equivalent to <code>Select.all(Select.all(int.class), Select.all(Integer.class))</code>. 4 Builder for constructing <code>Predicate&lt;Field&gt;</code> selectors. 5 Builder for constructing <code>Predicate&lt;Class&lt;?&gt;&gt;</code> selectors. 6 Selects the root, that is, the object being created.</p> <p>The <code>Select.allXxx()</code> methods such as <code>Select.allInts()</code>, are available for all core types.</p> <ul> <li><code>Select.all(GroupableSelector... selectors)</code></li> </ul> <p>This method can be used for grouping multiple selectors, allowing for more concise code as shown below.</p> <pre><code>Select.all(\n    Select.field(Address::getCity),\n    Select.field(Address.class, \"postalCode\"),\n    Select.all(Phone.class))\n</code></pre> <ul> <li><code>Select.fields()</code> and <code>Select.types()</code></li> </ul> <p>These selectors provide a builder API for constructing predicate selectors.  For example, the following selector matches <code>Long</code> fields annotated with <code>@Id</code></p> <pre><code>Select.fields().ofType(Long.class).annotated(Id.class)\n</code></pre> <p>which is equivalent to using the following predicate:</p> <pre><code>Select.fields(f -&gt; f.getType() == Long.class &amp;&amp; f.getDeclaredAnnotation(Id.class) != null)\n</code></pre> <ul> <li><code>Select.root()</code></li> </ul> <p>This method selects the root object. The following snippet creates nested lists, where the outer list and inner lists have different sizes:</p> <pre><code>List&lt;List&lt;String&gt;&gt; result = Instancio.of(new TypeToken&lt;List&lt;List&lt;String&gt;&gt;&gt;() {})\n    .generate(Select.root(), gen -&gt; gen.collection().size(outerListSize))\n    .generate(Select.all(List.class), gen -&gt; gen.collection().size(innerListSize))\n    .create();\n</code></pre> <p>In this case, <code>Select.all(List.class)</code> matches all lists except the outer list, because <code>Select.root()</code> selector has higher precedence than other selectors.</p>"},{"location":"user-guide/#setter-selectors","title":"Setter selectors","text":"<p>Setter selectors are available since version <code>4.0.0</code></p> <p>Setter selectors allow targeting setter methods. These selectors can only be used if Method Assignment is enabled.</p> <pre><code>Select.setter(String methodName)\nSelect.setter(Class&lt;?&gt; declaringClass, String methodName)\nSelect.setter(Class&lt;?&gt; declaringClass, String methodName, Class&lt;?&gt; parameterType)\n</code></pre> <p>1 Selects the setter by name, declared in the class being created. 2 Selects the setter by name, declared in the specified class. 3 Selects the setter by name and parameter type, declared in the specified class (for overloaded methods).</p> <p>Parameter type must be specified for overloaded methods.</p> <p>Omitting the parameter type will lead to undefined behaviour.</p> Examples<pre><code>Select.setter(Person.class, \"setName\")\nSelect.setter(Pojo.class, \"setValue\", String.class) // Pojo.setValue(String)\nSelect.setter(Pojo.class, \"setValue\", Long.class)   // Pojo.setValue(Long)\n</code></pre> <p>In addition, a setter can be selected using the method reference selector:</p> <pre><code>Select.setter(SetMethodSelector&lt;T, U&gt; methodReference)\n</code></pre> Example<pre><code>Select.setter(Person::setName)\n</code></pre>"},{"location":"user-guide/#selector-precedence","title":"Selector Precedence","text":"<p>Selector precedence rules apply when multiple selectors match a field or class:</p> <ul> <li>Regular selectors have higher precedence than predicate selectors.</li> <li>Field selectors have higher precedence than type selectors.</li> </ul> <p>Consider the following example:</p> <pre><code>Address address = Instancio.of(Address.class)\n    .set(Select.allStrings(), \"foo\")\n    .set(Select.field(\"city\"), \"bar\")\n    .create();\n</code></pre> <p>This will produce an address object with all strings set to \"foo\". However, since field selectors have higher precedence, the city will be set to \"bar\".</p> <p>In the following example, the city will also be set to \"bar\" because the predicate <code>Select.fields()</code> selector has lower precedence than the regular <code>Select.field()</code> selector:</p> <pre><code>Address address = Instancio.of(Address.class)\n    .set(Select.fields().named(\"city\"), \"foo\")\n    .set(Select.field(\"city\"), \"bar\")\n    .create();\n</code></pre>"},{"location":"user-guide/#multiple-matching-selectors","title":"Multiple matching selectors","text":"<p>When more than one selector matches a given target, then the last selector wins. This rule applies to both, regular and predicate selectors.</p> <p>In the case of regular selectors, if the two are identical, the last selector simply replaces the first (internally, regular selectors are stored as <code>Map</code> keys).</p> <pre><code>Address address = Instancio.of(Address.class)\n    .set(Select.field(Address.class, \"city\"), \"foo\")\n    .set(Select.field(Address.class, \"city\"), \"bar\") // wins!\n    .create();\n</code></pre> <p>Predicate selectors, on the other hand, are stored as a <code>List</code> and evaluated sequentially starting from the last entry.</p> <pre><code>Address address = Instancio.of(Address.class)\n    .set(Select.fields().named(\"city\"), \"foo\")\n    .set(Select.fields().named(\"city\"), \"bar\") // wins!\n    .lenient()\n    .create();\n</code></pre> <p>In this particular example, the first entry remains unused, which would cause an unused selector error. Therefore <code>lenient()</code> mode must be enabled to prevent the error (see Selector Strictness).</p>"},{"location":"user-guide/#selector-scopes","title":"Selector Scopes","text":"<p>Selectors provide the <code>within(Scope... scopes)</code> method for fine-tuning the targets selectors should be applied to. Instancio supports two types of scope:</p> <ul> <li>Class-level scope: narrows down a selector to the specified class.</li> <li>Field-level scope: narrows down a selector to the specified field of the target class.</li> <li>Predicate scope: narrows down a selector using a field or class predicate.</li> </ul> <p>To illustrate how scopes work we will assume the following structure for the <code>Person</code> class (getters and setters omitted).</p> <pre><code>class Person {\n    String name;\n    Address homeAddress;\n    Address workAddress;\n}\n\nclass Address {\n    String street;\n    String city;\n    List&lt;Phone&gt; phoneNumbers;\n}\n\nclass Phone {\n    String areaCode;\n    String number;\n}\n</code></pre> <p>Note that the <code>Person</code> class has two <code>Address</code> fields. Selecting <code>field(Address::getCity)</code> would target both addresses, <code>homeAddress</code> and <code>workAddress</code>. Without scopes, it would not be possible to set the two cities to different values. Using scopes solves this problem:</p> Creating scope using toScope() method<pre><code>Scope homeAddress = Select.field(Person::getHomeAddress).toScope();\nScope workAddress = Select.field(Person::getWorkAddress).toScope();\n\nPerson person = Instancio.of(Person.class)\n    .set(Select.field(Address::getCity).within(homeAddress), \"foo\")\n    .set(Select.field(Address::getCity).within(workAddress), \"bar\")\n    .create();\n</code></pre> <p>For more complex class structures, multiple scopes can be specified using <code>within(Scope...)</code> method. When specifying multiple scopes, the order is important: from outermost to innermost scope. Additional examples are provided below.</p>"},{"location":"user-guide/#creating-scopes","title":"Creating scopes","text":"<p>Scopes can be created using:</p> <ul> <li><code>Select.scope()</code> static methods in the Select class</li> <li><code>Selector.toScope()</code> method provided by regular selectors</li> <li><code>PredicateSelector.toScope()</code> method provided by predicate selectors</li> </ul> <p>The first approach requires specifying the target class and, for field-level scopes, the name of the field:</p> <pre><code>Select.scope(Class&lt;?&gt; targetClass)\nSelect.scope(Class&lt;?&gt; targetClass, String field)\nSelect.scope(GetMethodSelector&lt;T, R&gt; methodReference)\nSelect.scope(PredicateSelector selector)\n</code></pre> Examples<pre><code>Select.scope(Phone.class);\nSelect.scope(Person.class, \"homeAddress\");\nSelect.scope(Person::getHomeAddress);\nSelect.scope(type -&gt; type == Address.class);\n</code></pre> <p>The second approach is to create scopes from selectors using the <code>toScope()</code> method.</p> <pre><code>Select.all(Class&lt;T&gt; targetClass).toScope()\nSelect.field(Class&lt;T&gt; targetClass, String field).toScope()\nSelect.field(GetMethodSelector&lt;T, R&gt; methodReference).toScope()\nSelect.fields(Predicate&lt;Field&gt; predicate).toScope()\nSelect.types(Predicate&lt;Class&gt; predicate).toScope()\n</code></pre> Examples<pre><code>Select.all(Phone.class).toScope();\nSelect.field(Person.class, \"homeAddress\").toScope();\nSelect.field(Person::getHomeAddress).toScope();\nSelect.fields(field -&gt; field.getName().equals(\"id\")).toScope();\nSelect.types(type -&gt; type == Address.class).toScope();\n</code></pre>"},{"location":"user-guide/#examples-of-using-scopes","title":"Examples of using scopes","text":"<p>To start off, without using scopes we can set all strings to the same value. For example, the following snippet will set each string field of each class to \"foo\".</p> Set all strings to \"Foo\"<pre><code>Person person = Instancio.of(Person.class)\n    .set(Select.allStrings(), \"foo\")\n    .create();\n</code></pre> <p>Using <code>within()</code> we can narrow down the scope of the <code>allStrings()</code> selector as shown in the following examples. For brevity, <code>Instancio.of(Person.class)</code> is omitted.</p> Set all strings in all Address instances; this includes Phone instances as they are contained within addresses<pre><code>Select.allStrings().within(scope(Address.class))\n</code></pre> Set all strings contained within lists (matches all Phone instances in our example)<pre><code>Select.allStrings().within(scope(List.class))\n</code></pre> Set all strings in Person.homeAddress address object<pre><code>Select.allStrings().within(scope(Person.class, \"homeAddress\"))\n</code></pre> <p>Using <code>within()</code> also allows specifying multiple scopes. Scopes must be specified top-down, starting from the outermost to the innermost.</p> Set all strings of all Phone instances contained within Person.workAddress field<pre><code>Select.allStrings().within(scope(Person::getWorkAddress), scope(Phone.class))\n</code></pre> <p>The <code>Person.workAddress</code> object contains a list of phones, therefore <code>Person.workAddress</code> is the outermost scope and is specified first. <code>Phone</code> class is the innermost scope and is specified last.</p> <p>The final examples illustrate the creation of scope objects from regular selectors. The following examples are equivalent to each other:</p> Equivalent ways of creating scopes based on field<pre><code>Select.allStrings().within(scope(Person.class, \"homeAddress\"))\n\nSelect.allStrings().within(scope(Person::getHomeAddress))\n\nSelect.allStrings().within(field(Person.class, \"homeAddress\").toScope())\n\nSelect.allStrings().within(field(Person::getHomeAddress).toScope())\n</code></pre> Equivalent ways of creating scopes based on class<pre><code>Select.allStrings().within(scope(Person.class))\n\nSelect.allStrings().within(all(Person.class).toScope())\n</code></pre>"},{"location":"user-guide/#selector-depth","title":"Selector Depth","text":"<p>Regular and predicate selectors can also be narrowed down by specifying target's depth. Both selector types allow specifying depth as an integer value:</p> <pre><code>Select.all(Class&lt;T&gt; targetClass).atDepth(int depth)\nSelect.field(Class&lt;T&gt; targetClass, String field).atDepth(int depth)\nSelect.field(GetMethodSelector&lt;T, R&gt; methodReference).atDepth(int depth)\n\nSelect.fields(Predicate&lt;Field&gt; fieldPredicate).atDepth(int depth)\nSelect.types(Predicate&lt;Class&gt; typePredicate).atDepth(int depth)\n</code></pre> <p>In addition, predicate selectors also support specifying depth as a predicate:</p> <pre><code>Select.fields(Predicate&lt;Field&gt; fieldPredicate).atDepth(Predicate&lt;Integer&gt; depthPredicate)\nSelect.types(Predicate&lt;Class&gt; typePredicate).atDepth(Predicate&lt;Integer&gt; depthPredicate)\n</code></pre> <p>We will use the following class structure for the examples:</p> <pre><code>Depth       Class\n----------------------\n  0         Root\n            /  \\\n  1        A    B\n              / | \\\n  2          A  A  C\n                  / \\\n  3              A   D\n                      \\\n  4                    A\n</code></pre> <p>where the classes are defined as:</p> <pre><code>record Root(A a, B b) {}\nrecord A(String value) {}\nrecord B(A a1, A a2, C c) {}\nrecord C(A a, D d) {}\nrecord D(A a) {}\n</code></pre> <p>In the first few examples, we will target class <code>A</code> at different levels:</p> Select the <code>A</code> at depth 1<pre><code>Root root = Instancio.of(Root.class)\n    .set(Select.all(A.class).atDepth(1), new A(\"Hello!\"))\n    .create();\n\n=&gt; Root[a=A[value=\"Hello!\"], b=B[a1=A[value=\"BRHD\"], a2=A[value=\"AVBMJRP\"], c=C[a=A[value=\"PZK\"], d=D[a=A[value=\"AQVXCT\"]]]]]\n</code></pre> <p>Similar to the above, but omitting <code>Instancio.of()</code> for brevity:</p> Select the two <code>A</code> nodes at depth 2<pre><code>Select.all(A.class).atDepth(2)\n\n=&gt; Root[a=A[value=\"FNPI\"], b=B[a1=A[value=\"Hello!\"], a2=A[value=\"Hello!\"], c=C[a=A[value=\"IDLOM\"], d=D[a=A[value=\"QXPW\"]]]]]\n</code></pre> Select the <code>A</code> nodes at depths 3 and 4 (and beyond, if any)<pre><code>Select.types().of(A.class).atDepth(depth -&gt; depth &gt; 2)\n\n=&gt; Root[a=A[value=\"MWAASZU\"], b=B[a1=A[value=\"ODSRTG\"], a2=A[value=\"TDG\"], c=C[a=A[value=\"hello!\"], d=D[a=A[value=\"hello!\"]]]]]\n</code></pre> Select all (four) <code>A</code> nodes reachable from <code>B</code><pre><code>Select.all(A.class).within(scope(B.class))\n\n=&gt; Root[a=A[value=\"GNDUXU\"], b=B[a1=A[value=\"hello!\"], a2=A[value=\"hello!\"], c=C[a=A[value=\"hello!\"], d=D[a=A[value=\"hello!\"]]]]]\n</code></pre> <p>The next example is targeting <code>allStrings()</code>, therefore the value is being set to <code>\"Hello!\"</code> instead of <code>new A(\"Hello!\")</code>. This snippet targets all strings that are reachable from class <code>A</code>, but only if class <code>A</code> is at depth <code>3</code> or greater.</p> Select all Strings reachable from <code>A</code> nodes at depth 3 or greater<pre><code>Root root = Instancio.of(Root.class)\n    .set(Select.allStrings().within(all(A.class).atDepth(3).toScope()), \"Hello!\")\n    .create();\n\n=&gt; Root[a=A[value=\"SERWVQV\"], b=B[a1=A[value=\"PTF\"], a2=A[value=\"CHZP\"], c=C[a=A[value=\"hello!\"], d=D[a=A[value=\"hello!\"]]]]]\n</code></pre> <p>2 When a selector <code>atDepth(N)</code> is converted to <code>toScope()</code>, the selection matches any target at depth <code>N</code> or greater.</p> <p>The final example is targeting the field <code>A.value</code> but only within the <code>a1</code> field of class <code>B</code>:</p> Select <code>A.value</code> of the <code>a1</code> field<pre><code>Select.field(A::value).within(field(B::a1).toScope())\n\n=&gt; Root[a=A[value=\"DBOS\"], b=B[a1=A[value=\"hello!\"], a2=A[value=\"KFBWJL\"], c=C[a=A[value=\"VLTNXF\"], d=D[a=A[value=\"CDV\"]]]]]\n</code></pre>"},{"location":"user-guide/#selector-strictness","title":"Selector Strictness","text":""},{"location":"user-guide/#strict-mode","title":"Strict Mode","text":"<p>Instancio supports two modes: strict and lenient, an idea inspired by Mockito's highly useful strict stubbing feature.</p> <p>In strict mode, unused selectors will trigger an error. In lenient mode, unused selectors are simply ignored. By default, Instancio runs in strict mode. This is done for the following reasons:</p> <ul> <li>to eliminate errors in data setup</li> <li>to simplify fixing tests after refactoring</li> <li>to keep test code clean and maintainable</li> </ul>"},{"location":"user-guide/#eliminate-errors-in-data-setup","title":"Eliminate errors in data setup","text":"<p>An unused selector could indicate an error in the data setup. As an example, consider populating the following POJO:</p> <pre><code>class SamplePojo {\n    SortedSet&lt;String&gt; values;\n}\n\nSamplePojo pojo = Instancio.of(SamplePojo.class)\n    .generate(Select.all(Set.class), gen -&gt; gen.collection().size(10))\n    .create();\n</code></pre> <p>At first glance, we might expect a <code>Set</code> of size 10 to be generated. However, since the field is declared as a <code>SortedSet</code> and the class selector targets <code>Set</code>, the <code>generate()</code> method will not be applied. </p> <p>Since <code>Select.all(Set.class)</code> did not match any target, Instancio produces an error:</p> <pre><code>org.instancio.exception.UnusedSelectorException:\n\n -&gt; Unused selectors in generate(), set(), or supply():\n 1: all(Set)\n</code></pre> <p>Without being aware of this detail, it is easy to make this kind of error and face unexpected results even with a simple class like the above. It gets trickier when generating more complex classes. Strict mode helps reduce this type of error.</p>"},{"location":"user-guide/#simplify-fixing-tests-after-refactoring","title":"Simplify fixing tests after refactoring","text":"<p>Refactoring always causes tests to break to some degree. As classes and fields get reorganised and renamed, tests need to be updated to reflect the changes. Assuming there are existing tests utilising Instancio, running tests in strict mode will quickly highlight any problems in data setup caused by refactoring.</p>"},{"location":"user-guide/#keep-test-code-clean-and-maintainable","title":"Keep test code clean and maintainable","text":"<p>Last but not least, it is important to keep tests clean and maintainable. Test code should be treated with as much care as production code. Keeping the tests clean and concise makes them easier to maintain.</p>"},{"location":"user-guide/#lenient-mode","title":"Lenient Mode","text":"<p>While strict mode is highly recommended, Instancio provides a few options to disable checking for unused selectors. The following are the possible options, with the least recommended last: </p> <ol> <li>At selector level, by marking an individual selector as lenient</li> <li>At object level, by treating all selectors as lenient</li> <li>Via Settings</li> <li>Globally via <code>instancio.properties</code></li> </ol> <p>The first option is shown below, where the selector is marked as <code>lenient()</code>:</p> Marking an individual selector as lenient<pre><code>Person person = Instancio.of(Person.class)\n    .set(Select.fields().named(\"someFieldThatMayNotExist\").lenient(), \"some value\")\n    .create();\n</code></pre> <p>The second option is to enable lenient mode for all selectors:</p> Setting lenient mode using the builder API<pre><code>Person person = Instancio.of(Person.class)\n    .set(Select.fields().named(\"someFieldThatMayNotExist\"), \"some value\")\n    .set(Select.fields().named(\"anotherFieldThatMayNotExist\"), \"another value\")\n    .lenient()\n    .create();\n</code></pre> <p>Alternatively, lenient mode can be enabled using <code>Settings</code>:</p> Setting lenient mode using <code>Settings</code><pre><code>Settings settings = Settings.create()\n    .set(Keys.MODE, Mode.LENIENT);\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    // snip... same selectors as above\n    .create();\n</code></pre> <p>Lastly, lenient mode can also be enabled globally using <code>instancio.properties</code>. This is the least recommended option.</p> Setting lenient mode using <code>instancio.properties</code><pre><code>mode=LENIENT\n</code></pre>"},{"location":"user-guide/#customising-objects","title":"Customising Objects","text":"<p>Properties of an object created by Instancio can be customised using</p> <ul> <li><code>generate()</code></li> <li><code>set()</code></li> <li><code>supply()</code></li> </ul> <p>methods defined in the InstancioApi class.</p> <p>For brevity, the following examples assume a static import for selectors <code>import static org.instancio.Select.*</code></p>"},{"location":"user-guide/#using-generate","title":"Using <code>generate()</code>","text":"<p>The <code>generate()</code> method provides access to built-in generators for core types from the JDK, such as strings, numeric types, dates, arrays, collections, and so on. It allows modifying generation parameters for these types in order to fine-tune the data. The usage is shown in the following example, where the <code>gen</code> parameter (of type Generators) exposes the available generators to simplify their discovery using IDE auto-completion.</p> Example of using generate()<pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(\"age\"), gen -&gt; gen.ints().range(18, 65))\n    .generate(field(\"pets\"), gen -&gt; gen.array().length(3))\n    .generate(field(Phone.class, \"number\"), gen -&gt; gen.text().pattern(\"#d#d#d-#d#d-#d#d\"))\n    .create();\n</code></pre> <p>Below is another example of customising a <code>Person</code>. For instance, if the  <code>Person</code> class has a field <code>List&lt;Phone&gt;</code>, by default Instancio would use <code>ArrayList</code> as the implementation. Using the collection generator, this can be overridden by specifying the type explicitly:</p> Example: customising a collection<pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(\"phoneNumbers\"), gen -&gt; gen.collection().minSize(3).subtype(LinkedList.class))\n    .generate(field(Phone.class, \"countryCode\"), gen -&gt; gen.oneOf(\"+33\", \"+39\", \"+44\", \"+49\"))\n    .create();\n</code></pre> <p>Each generator provides methods applicable to the type it generates, for example:</p> <ul> <li><code>gen.string().minLength(3).allowEmpty().nullable()</code></li> <li><code>gen.map().size(5).nullableValues().subtype(TreeMap.class)</code></li> <li><code>gen.temporal().localDate().future()</code></li> <li><code>gen.longs().min(Long.MIN_VALUE)</code></li> <li><code>gen.enumOf(MyEnum.class).excluding(MyEnum.FOO, MyEnum.BAR)</code></li> </ul> <p>See Built-in Generators for a list of available generators</p> <p>In addition, most generators can also map values to a different type. For example, the following returns generated values as Strings:</p> <pre><code>class Foo {\n    String dateString;\n    String enumString;\n}\n\nInstancio.of(Foo.class)\n    .generate(field(\"dateString\"), gen -&gt; gen.temporal().localDate().past().asString())\n    .generate(field(\"enumString\"), gen -&gt; gen.enumOf(MyEnum.class).as(e -&gt; e.name().toUpperCase()))\n    .create();\n</code></pre>"},{"location":"user-guide/#using-set","title":"Using <code>set()</code>","text":"<p>The <code>set()</code> method can be used for setting a static value to selected targets, just like a regular setter method:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .set(field(Phone::getCountryCode), \"+1\")\n    .set(all(LocalDateTime.class), LocalDateTime.now())\n    .create();\n</code></pre> <p>However, unlike a regular set method that can only be invoked on a single object, the above will set <code>countryCode</code> to \"+1\" on all generated instances of <code>Phone</code> class. Assuming the <code>Person</code> class contains a <code>List&lt;Phone&gt;</code>, they will all have the specified country code. Similarly, all <code>LocalDateTime</code> values will be set to the same instance of <code>now()</code>.</p>"},{"location":"user-guide/#using-supply","title":"Using <code>supply()</code>","text":"<p>The <code>supply()</code> method has two variants:</p> <pre><code>supply(TargetSelector selector, Supplier&lt;V&gt; supplier)\nsupply(TargetSelector selector, Generator&lt;V&gt; generator)\n</code></pre> <p>The first accepts a <code>java.util.function.Supplier</code> and is for supplying non-random values. The second accepts an Instancio Generator (a functional interface) and can be used for supplying random values.</p>"},{"location":"user-guide/#using-supply-to-provide-non-random-values","title":"Using supply() to provide non-random values","text":"<p>The following is another example of setting all <code>LocalDateTime</code> instances to <code>now()</code>.</p> <pre><code>Person person = Instancio.of(Person.class)\n    .supply(all(LocalDateTime.class), () -&gt; LocalDateTime.now())\n    .create();\n</code></pre> <p>Unlike the earlier example using <code>set()</code>, this will assign a new instance for each <code>LocalDateTime</code>:</p> <pre><code>set(all(LocalDateTime.class), LocalDateTime.now())        // reuse the same instance for all dates\nsupply(all(LocalDatime.class), () -&gt; LocalDateTime.now()) // create a new instance for each date\n</code></pre>"},{"location":"user-guide/#using-supply-to-provide-random-values","title":"Using supply() to provide random values","text":"<p>The second variant of the <code>supply()</code> method can be used for supplying random values and objects. This method takes a Generator as an argument, which is a functional interface with the following signature:</p> <pre><code>import org.instancio.Random;\n\ninterface Generator&lt;T&gt; {\n    T generate(Random random);\n}\n</code></pre> <p>Using the provided Random instance ensures that generated objects are reproducible. Since <code>Generator</code> is a functional interface it can be specified as a lambda expression:</p> <pre><code>Person person = Instancio.of(Person.class)\n        .supply(all(Phone.class), random -&gt; Phone.builder()\n                .countryCode(random.oneOf(\"+1\", \"+52\"))\n                .number(random.digits(7))\n                .build())\n        .create();\n</code></pre> <p>Generators can be used for generating simple value types as well as building complex objects. They are described in more detail in the Custom Generators section.</p>"},{"location":"user-guide/#summary-of-methods-for-customising-objects","title":"Summary of methods for customising objects","text":"<p>Methods <code>set(TargetSelector, Object)</code> and <code>supply(TargetSelector, Supplier)</code> are for supplying objects as is. The provided objects are treated as read-only by the engine. The behaviour of these methods cannot be customised.</p> <ul> <li>matching selectors will not be applied</li> <li>the engine will not modify or populate any fields of the supplied object</li> <li>callbacks are not invoked on objects provided by these methods</li> </ul> <p>Method <code>supply(TargetSelector, Generator)</code> is for creating objects using custom <code>Generator</code> implementations. This method offers configurable behaviour via the <code>AfterGenerate</code> hint. By default, the hint is set to <code>POPULATE_NULLS_AND_DEFAULT_PRIMITIVES</code>, which implies:</p> <ul> <li>matching selectors will be applied</li> <li>the engine will populate <code>null</code> fields and primitive fields containing default values</li> </ul> <p>The default value of the <code>AfterGenerate</code> hint can be overridden using <code>instancio.properties</code> and Settings.</p> <p>Info</p> <p>Callbacks are always invoked on objects created by generators regardless of <code>AfterGenerate</code> value.</p> <p>Method <code>generate(TargetSelector, GeneratorSpecProvider)</code> is for customising objects created by internal generators. Such objects include value types (numbers, strings, dates) and data structures (collections, arrays).</p> <ul> <li>matching selectors are always applied</li> <li>matching callbacks are always invoked</li> </ul> <p>By default, the engine generates non-null values, unless specified otherwise.</p>"},{"location":"user-guide/#using-assign","title":"Using <code>assign()</code>","text":"<p>Experimental API <code>@since 3.0.0</code></p> <p>The assignment API allows customising an object by passing in one or more <code>Assignment</code> objects as a vararg:</p> <pre><code>InstancioApi&lt;T&gt; assign(Assignment... assignments);\n</code></pre> <p>Assignments can be created using static methods provided by the Assign class. It provides three entry-point methods for creating an assignment:</p> <pre><code>Assign.given(TargetSelector origin)\nAssign.given(TargetSelector origin, TargetSelector destination)\nAssign.valueOf(TargetSelector target)\n</code></pre> <p>Each <code>Assignment</code> may have:</p> <ul> <li>an origin selector - the source of the assignment; must match exactly one value</li> <li>destination selector(s) whose target(s) will be assigned a given value</li> <li><code>Generator</code> for generating the value to assign</li> <li><code>Predicate</code> that must be satisfied by the origin for the assignment to be applied</li> <li><code>Function</code> for mapping the value before assigning to destination targets</li> </ul> <p>The three types of expressions can be used for different use-cases described in the following sections.</p>"},{"location":"user-guide/#assignvalueoftarget","title":"<code>Assign.valueOf(target)</code>","text":"<p>This builder provides two options:</p> <ul> <li>Assign value directly to the <code>target</code></li> <li>Assign value of the <code>target</code> to another selector</li> </ul> <p>The first option is to assign a value directly to the <code>target</code> selector using <code>set()</code>, <code>supply()</code>, or <code>generate()</code> methods as shown in the following example:</p> <pre><code>Assignment[] assignments = {\n    Assign.valueOf(Person::getName).set(\"Bob\"),\n    Assign.valueOf(Person::getAge).generate(gen-&gt;gen.ints().range(1,100))\n};\n\nPerson person = Instancio.of(Person.class)\n    .assign(assignments)\n    .create();\n</code></pre> <p>The second option is to set the value of the <code>target</code> to another selector. For example, the following snippet assigns the value of <code>Person.firstName</code> to <code>Person.preferredName</code>:</p> <pre><code>Assignment preferredName = Assign.valueOf(Person::getFirstName).to(Person::getPreferredName);\n\nPerson person = Instancio.of(Person.class)\n    .assign(preferredName)\n    .create();\n</code></pre> <p>This method supports an optional predicate to specify when the assignment should be applied. In the following example, the preferred name is set to the first name only if the first name starts with \"A\". Otherwise, the preferred name will be set to a random value.</p> <pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(Person::getFirstName), gen -&gt; gen.oneOf(\"Alice\", \"Alex\", \"Robert\"))\n    .assign(valueOf(Person::getFirstName)\n            .to(Person::getPreferredName)\n            .when((String firstName) -&gt; firstName.startsWith(\"A\")))\n    .create()\n</code></pre> <p>In addition, the expression allows specifying a <code>Function</code> for transforming the result. For example, the following snippet sets the preferred name to the same value as the first name, unless the first name is Robert, in which case the preferred name will be set to Bob:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(Person::getFirstName), gen -&gt; gen.oneOf(\"Alice\", \"Alex\", \"Robert\"))\n    .assign(valueOf(Person::getFirstName)\n            .to(Person::getPreferredName)\n            .as((String firstName) -&gt; \"Robert\".equals(firstName) ? \"Bob\" : firstName))\n    .create()\n</code></pre>"},{"location":"user-guide/#assigngivenorigin","title":"<code>Assign.given(origin)</code>","text":"<p>This expression allows setting different destination selectors with different values based on a given origin and predicate. The following snippet sets cancellation-related order data when the generated order status is <code>CANCELLED</code>:</p> <pre><code>List&lt;Order&gt; orders = Instancio.ofList(Order.class)\n    .assign(Assign.given(Order::getStatus)\n        .is(OrderStatus.CANCELLED)\n        .set(field(Order::getCancellationReason), \"Shipping delays\")\n        .set(field(Order::isRefundIssued), true)\n        .generate(field(Order::getCancellationDate), gen -&gt; gen.temporal().instant().past()))\n    .create();\n</code></pre>"},{"location":"user-guide/#assigngivenorigin-destination","title":"<code>Assign.given(origin, destination)</code>","text":"<p>This expression allows mapping predicates to different values for a given pair of origin and destination selectors:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .assign(Assign.given(field(Address::getCountry), field(Phone::getCountryCode))\n        .set(When.isIn(\"Canada\", \"USA\"), \"+1\")\n        .set(When.is(\"Italy\"), \"+39\")\n        .set(When.is(\"Poland\"), \"+48\")\n        .set(When.is(\"Germany\"), \"+49\")\n        .elseGenerate(gen -&gt; gen.ints().range(1, 999).as(code -&gt; \"+\" + code)))\n    .create();\n</code></pre> <p>The When class provides convenience methods for creating predicates. In addition to <code>set(predicate, value)</code> method shown above, this API also supports <code>supply()</code> and <code>generate()</code>, as well as the following optional methods to specify an <code>else</code> action if none of the predicates match:</p> <ul> <li><code>elseSet()</code></li> <li><code>elseSupply()</code></li> <li><code>elseGenerate()</code></li> </ul>"},{"location":"user-guide/#assignment-restrictions","title":"Assignment Restrictions","text":""},{"location":"user-guide/#origin-selector-restrictions","title":"Origin selector restrictions","text":"<p>When using assignments, the origin selector must match a single target. For this reason, the origin does not support selector groups and primitive/wrapper selectors, such as <code>allInts()</code>.</p> <p>For example, <code>Assign.given(allStrings())</code> is acceptable for the following class because there is only one string that matches the selector:</p> <pre><code>record MyRecord(String string, Integer number) {}\n</code></pre> <p>but not for the following classes because <code>allStrings()</code> would match more than one string value:</p> <pre><code>record MyRecord(String string1, String string2, Integer number) {}\n\nrecord MyRecord(List&lt;String&gt; string, Integer number) {}\n</code></pre> <p>Convenience primitive/wrapper selectors, such as <code>allInts()</code>, are not accepted by assignments as they are a shorthand for <code>Select.all(all(int.class). all(Integer.class))</code>. Assignment expressions must specify either the primitive, or the wrapper type explicitly: <code>Assign.given(all(Integer.class))</code>.</p>"},{"location":"user-guide/#collection-restrictions","title":"Collection restrictions","text":"<p>Assignments have an additional restriction when used with collections. If the origin selector of an assignment targets a collection element, then destination selector(s) must be within the collection. Assuming we have the following data model:</p> <pre><code>class Person {\n    String name;\n    String countryOfCitizenship;\n    List&lt;Address&gt; addresses;\n}\n\nclass Address {\n    String street;\n    String city;\n    String country;\n}\n</code></pre> <p>It is possible to create an assignment based on address <code>city</code> and fields <code>country</code>:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(Address::getCountry), gen -&gt; gen.oneOf(\"France\", \"Italy\", \"Spain\"))\n    .assign(given(field(Address::getCountry), field(Address::getCity))\n        .set(When.is(\"France\"), \"Paris\")\n        .set(When.is(\"Italy\"), \"Rome\")\n        .set(When.is(\"Spain\"), \"Madrid\"))\n    .create();\n</code></pre> <p>Since <code>Address</code> is a collection element, the assignment is scoped to each <code>Address</code> instance. The following usage, on the other hand, is invalid:</p> Invalid usage<pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(Address::getCountry), gen -&gt; gen.oneOf(\"France\", \"Italy\", \"Spain\"))\n    .assign(valueOf(Address::getCountry).to(Person::getCountryOfCitizenship))\n    .create();\n</code></pre> <p>This is because <code>Address</code> is a collection element, therefore, <code>valueOf(Address::getCountry)</code> matches multiple values. For this reason, no guarantee is made as to the value that will be assigned to <code>Person.countryOfCitizenship</code> field.</p>"},{"location":"user-guide/#using-oncomplete","title":"Using <code>onComplete()</code>","text":"<p>Another option for customising generated data is using the OnCompleteCallback, a functional interface with the following signature:</p> <pre><code>interface OnCompleteCallback&lt;T&gt; {\n    void onComplete(T object);\n}\n</code></pre> <p>The <code>OnCompleteCallback</code> is invoked after the generated object has been fully populated. Callbacks can be triggered only for objects:</p> <ul> <li>created internally by the engine</li> <li>created by custom generators</li> </ul> <p>Callbacks are never invoked on objects provided using:</p> <ul> <li><code>supply(TargetSelector, Supplier)</code></li> <li><code>set(TargetSelector, Object)</code></li> </ul> <p>The following example demonstrates how an <code>Address</code> object can be modified using a callback. If a <code>Person</code> has a <code>List&lt;Address&gt;</code>, the callback will be invoked for every instance of the <code>Address</code> class that was generated.</p> Example: modifying an object via a callback<pre><code>Person person = Instancio.of(Person.class)\n    .onComplete(all(Address.class), (Address address) -&gt; {\n        address.setCity(\"Vancouver\");\n        address.setProvince(\"BC\");\n        address.setCountry(\"Canada\");\n    })\n    .create();\n</code></pre> <p>If the object is mutable, callbacks allow modifying multiple fields at once. However, callbacks cannot be used to modify immutable types.</p> <p>Another property of callbacks is that they are only invoked on non-null objects. In the following example, all address instances are nullable. Therefore, a generated address instance may either be <code>null</code> or a fully-populated object. However, if a <code>null</code> was generated, the callback will not be invoked.</p> Callbacks are only called on non-null values<pre><code>Person person = Instancio.of(Person.class)\n    .withNullable(all(Address.class))\n    .onComplete(all(Address.class), (Address address) -&gt; {\n        // only-called if the generated address is not null\n    })\n    .create();\n</code></pre>"},{"location":"user-guide/#using-filter","title":"Using <code>filter()</code>","text":"<p>Experimental API <code>@since 4.6.0</code></p> <p>This method can be used to filter generated values using a predicate. If the predicate evaluates to <code>false</code> for a given value, Instancio will generate a new value. The new value will also be tested against the predicate, and so on.</p> <p>A simple example is to generate a list of even numbers:</p> Example: generate even numbers<pre><code>List&lt;Integer&gt; evenNumbers = Instancio.ofList(Integer.class)\n    .filter(allInts(), (Integer i) -&gt; i % 2 == 0)\n    .create();\n</code></pre> <p>A more realistic use case is to ensure that certain fields of a generated object have unique values. For instance, we may want to generate a list of <code>Person</code> objects with unique string and numeric values. If the <code>Person</code> contains numeric IDs, this will ensure that the generated ID values are distinct across all instances:</p> Example: generate an object with unique values<pre><code>Set&lt;?&gt; generatedValues = new HashSet&lt;&gt;();\n\nList&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .size(100)\n    .filter(all(allInts(), allLongs(), allStrings()), generatedValues::add)\n    .create();\n</code></pre> <p>5 Generate distinct ints, longs and strings by rejecting duplicates.</p> <p>This is how <code>withUnique()</code> API is implemented.</p> <p>It should be noted that using the <code>filter()</code> method can be inefficient if the probability of generating a random value that would be rejected by the predicate is high. This is because a value that does not satisfy the predicate must be generated again. This results in many values being generated and discarded.</p> <p>Maximum retries</p> <p>An exception will be thrown if the number of retries to generate a value for a given node exceeds <code>1000</code>.</p> <p>In addition. it is not recommended to use <code>filter()</code> with POJOs or collections. For example, if <code>isActive()</code> returns <code>false</code> in the following snippet, the entire <code>User</code> object will be generated from scratch:</p> Not recommended!<pre><code>List&lt;User&gt; users = Instancio.ofList(User.class)\n    .filter(all(User.class), (User user) -&gt; user.isActive())\n    .create();\n</code></pre> <p>Therefore, customising objects using other APIs, such as <code>generate()</code> should be preferred over <code>filter()</code>, if possible.</p>"},{"location":"user-guide/#using-withunique","title":"Using <code>withUnique()</code>","text":"<p>Experimental API <code>@since 4.8.0</code></p> <p>This method can be used to generate unique values for a given selector's targets. Assuming the following class:</p> <pre><code>record Data(int foo, int bar) {}\n</code></pre> <p>The snippet below will generate a list of <code>Data</code> instances with unique <code>foo</code> values:</p> <pre><code>List&lt;Data&gt; results = Instancio.ofList(Data.class)\n    .size(100)\n    .withUnique(field(Data::foo))\n    .create();\n</code></pre> <p>Note that the values will be unique across all targets that match the selector. For instance, the following usages:</p> <ul> <li><code>withUnique(allInts())</code></li> <li><code>withUnique(all(field(Data::foo), field(Data::bar))</code></li> </ul> <p>would result in unique values for <code>foo</code> and <code>bar</code> with no overlap (i.e. <code>foo</code> and <code>bar</code> are disjoint). To generate unique values per field (with potential overlap), the <code>withUnique()</code>method must be specified per field:</p> <pre><code>List&lt;Data&gt; results = Instancio.ofList(Data.class)\n    .size(100)\n    .withUnique(field(Data::foo)) // e.g. { 601, 42, 573, ...}\n    .withUnique(field(Data::bar)) // e.g. { 888, 251, 42, ...}\n    .create();\n</code></pre> <p>3-4 Note that the value <code>42</code> was generated for both fields.</p> <p>If it is impossible to generate a sufficient number of  unique values after a certain number of attempts, an exception will be thrown:</p> <pre><code>List&lt;Boolean&gt; results = Instancio.ofList(Boolean.class)\n    .size(10)\n    .withUnique(allBooleans())\n    .create();\n</code></pre> <p>2-3 Will fail as it's impossible to generate 10 unique booleans.</p>"},{"location":"user-guide/#using-setblank","title":"Using <code>setBlank()</code>","text":"<p>Experimental API <code>@since 4.7.0</code></p> <p>This method can be used to initialise certain parts of an object to be blank using selectors. Its behaviour is the same as the methods below (which can be used for creating a blank root object):</p> <ul> <li><code>Instancio.createBlank(Class&lt;T&gt;)</code></li> <li><code>Instancio.ofBlank(Class&lt;T&gt;)</code></li> </ul> <p>Blank objects have the following properties:</p> <ul> <li>value fields (such as strings, numbers, dates) are <code>null</code></li> <li>arrays, collections, and maps are empty</li> <li>references to POJOs are initialised to blank objects</li> </ul> <p>For example, assuming the <code>Person</code> class below (getters and setters omitted):</p> <pre><code>class Person {\n    String name;\n    LocalDate dateOfBirth;\n    List&lt;Phone&gt; phoneNumbers;\n    Address address;\n}\n</code></pre> <p>The following snippet</p> <pre><code>Person person = Instancio.of(Person.class)\n    .setBlank(field(Person::getPhoneNumbers))\n    .setBlank(all(Address.class))\n    .create();\n</code></pre> <p>1 We use <code>of(Person.class)</code> and not <code>ofBlank(Person.class)</code>, as the latter would create a blank root object.</p> <p>will produce a partially blank object, where only the <code>name</code> and <code>dateOfBirth</code> fields are populated with random values. The <code>address</code> field has been set to a blank object and <code>phoneNumbers</code> to an empty <code>List</code>:</p> <pre><code>// Person[\n//   name=NOBXGV,\n//   dateOfBirth=2022-03-18,\n//   phoneNumbers=[]\n//   address=Address[street=null, city=null, country=null]\n// ]\n</code></pre> <p>Blank objects can be customised further if needed. For example, we can set the country field to \"Canada\", generate a collection of blank phones of size <code>2</code>, and set the <code>countryCode</code> to <code>+1</code> as shown below:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .setBlank(field(Person::getPhoneNumbers))\n    .setBlank(all(Address.class))\n    .generate(field(Person::getPhoneNumbers), gen -&gt; gen.collection().size(2))\n    .set(field(Phone::getCountryCode), \"+1\")\n    .set(field(Address::getCountry), \"Canada\")\n    .create();\n\n// Sample output:\n// Person[\n//   name=GLTJXQM,\n//   dateOfBirth=2029-04-06,\n//   phoneNumbers=[\n//       Phone[countryCode=+1,number=&lt;null&gt;],\n//       Phone[countryCode=+1,number=&lt;null&gt;]]\n//   address=Address[street=null, city=null, country=Canada]\n// ]\n</code></pre>"},{"location":"user-guide/#using-ignore","title":"Using <code>ignore()</code>","text":"<p>By default, Instancio will attempt to populate every non-static field value. The <code>ignore</code> method can be used where this is not desirable:</p> Example: ignoring certain fields and classes<pre><code>Person person = Instancio.of(Person.class)\n    .ignore(field(Person::getPets))\n    .ignore(all(LocalDateTime.class))\n    .create();\n\n// Or combining the selectors\nPerson person = Instancio.of(Person.class)\n    .ignore(all(\n        field(Person::getPets),\n        all(LocalDateTime.class)))\n    .create();\n</code></pre>"},{"location":"user-guide/#precedence-of-ignore","title":"Precedence of <code>ignore()</code>","text":"<p>The <code>ignore()</code> method has higher precedence than other methods. For example, in the following snippet specifying <code>ignore(all(LocalDateTime.class))</code> but supplying a value for the <code>lastModified</code> field will actually generate a <code>lastModified</code> with a <code>null</code> value.</p> Example<pre><code>Person person = Instancio.of(Person.class)\n    .ignore(all(LocalDateTime.class))\n    .supply(field(Person::getLastModified), () -&gt; LocalDateTime.now())\n    .create();\n</code></pre>"},{"location":"user-guide/#usage-of-ignore-with-java-records","title":"Usage of <code>ignore()</code> with Java records","text":"<p>When <code>ignore()</code> is used to target one of the required arguments of a <code>record</code> constructor, then a default value for the ignored type will be generated.</p> Example<pre><code>record PersonRecord(String name, int age) {}\n\nPersonRecord person = Instancio.of(PersonRecord.class)\n    .ignore(allInts())\n    .ignore(allStrings())\n    .create();\n\n// will produce: PersonRecord[name=null, age=0]\n</code></pre>"},{"location":"user-guide/#nullable-values","title":"Nullable Values","text":"<p>By default, Instancio generates non-null values. There are cases where this behaviour may need to be relaxed, for example, to verify that a piece of code does not fail in the presence of certain <code>null</code> values. There are a few ways to specify that values can be nullable which can broadly be grouped into two categories:</p> <ul> <li>field nullability</li> <li>array/collection element and map key/value nullability</li> </ul>"},{"location":"user-guide/#field-nullability","title":"Field nullability","text":"<p>Field declarations can be made nullable using:</p> <ul> <li>withNullable(TargetSelector) method of the builder API</li> <li>generator spec <code>nullable()</code> method (for generators that support it)</li> <li>Settings</li> </ul> <p>For example, the following marks <code>Person.address</code> and all <code>String</code> fields as nullable:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withNullable(field(Person::getAddress))\n    .withNullable(allStrings())\n    .create();\n</code></pre> <p>Some built-in generators also support marking values as nullable using the <code>nullable()</code> method. As in the previous example, this also applies only to string fields, and not, for example, <code>List&lt;String&gt;</code>:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .generate(allStrings(), gen -&gt; gen.string().nullable())\n    .create();\n</code></pre> <p>The final example, using <code>Settings</code>, follows the same principle:</p> <pre><code>Settings settings = Settings.create()\n    .set(Keys.STRING_NULLABLE, true);\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    .create();\n</code></pre>"},{"location":"user-guide/#element-nullability","title":"Element nullability","text":"<p>Data structure elements can be made nullable using:</p> <ul> <li>array generator: <code>nullableElements()</code></li> <li>collection generator: <code>nullableElements()</code></li> <li>map generator: <code>nullableKeys()</code>, <code>nullableValues()</code></li> <li>Settings keys<ul> <li><code>Keys.ARRAY_ELEMENTS_NULLABLE</code></li> <li><code>Keys.COLLECTION_ELEMENTS_NULLABLE</code></li> <li><code>Keys.MAP_KEYS_NULLABLE</code></li> <li><code>Keys.MAP_VALUES_NULLABLE</code></li> </ul> </li> </ul> Example: specifying nullability using the collection generator<pre><code>Person person = Instancio.of(Person.class)\n    .generate(field(\"phoneNumbers\"), gen -&gt; gen.collection()\n            .nullable()\n            .nullableElements())\n    .create();\n</code></pre> <p>3 The collection itself is nullable. 4 Collection elements are nullable.</p> <p>Assuming the <code>Person</code> class contains a <code>Map</code>, nullability can be specified for keys and values:</p> Example: specifying nullability using the map generator<pre><code>Person person = Instancio.of(Person.class)\n    .generate(all(Map.class), gen -&gt; gen.map().nullableKeys().nullableValues())\n    .create();\n</code></pre> <p>Lastly, element nullability can be specified using Settings as follows:</p> Example: specifying nullability using Settings<pre><code>Settings settings = Settings.create()\n    .set(Keys.COLLECTION_ELEMENTS_NULLABLE, true);\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    .create();\n</code></pre>"},{"location":"user-guide/#subtype-mapping","title":"Subtype Mapping","text":"<p>Subtype mapping allows mapping a type to its subtype. This can be used for:</p> <ul> <li>specifying an implementation class for an abstract class or interface</li> <li>testing behaviour using different implementations</li> </ul> <p>By default, Instancio does not resolve implementation classes of an abstract type. The only exceptions to this are:</p> <ul> <li>JDK classes, such <code>List</code>, <code>Map</code>, <code>CharSequence</code>, etc.   (which default to <code>ArrayList</code>, <code>HashMap</code>, and <code>String</code>, respectively).</li> <li><code>sealed</code> interfaces and abstract classes (which default to a random implementation).</li> </ul> <p>For user-defined abstract types, the implementation class must be specified via the API. If not specified:</p> <ul> <li>a <code>null</code> value will be generated where the abstract type is a field</li> <li>an empty collection will be generated if the abstract type is a collection element</li> <li>an exception will be thrown if the root type is abstract and no subtype is specified</li> </ul>"},{"location":"user-guide/#specifying-subtypes","title":"Specifying Subtypes","text":"<p>The mapping can be specified using the <code>subtype()</code> method provided by InstancioApi:</p> <pre><code>subtype(TargetSelector selector, Class&lt;?&gt; subtype)\n</code></pre> <p>or the <code>mapType()</code> method declared by the Settings class:</p> <pre><code>mapType(Class&lt;?&gt; type, Class&lt;?&gt; subtype)\n</code></pre> <p>Functionally, the two methods are equivalent. However, one may be preferable over another depending on the use case.</p> <p>The <code>subtype()</code> method</p> <ul> <li>has higher precedence than the one offered by <code>Settings</code></li> <li>provides more flexibility as it can be applied to any selector target, such as fields</li> </ul> <p>The <code>Settings.mapType()</code> method, on the other hand</p> <ul> <li>can only be mapped based on class</li> <li>is reusable since an instance of <code>Settings</code> can be shared across multiple test methods</li> <li>allows subtypes to be specified via <code>instancio.properties</code> and applied automatically</li> </ul> <p>The following is an example of using the <code>subtype()</code> method:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .subtype(all(all(Collection.class), all(Set.class)), TreeSet.class)\n    .subtype(field(Person::getPet), Cat.class)\n    .subtype(all(Address.class), AddressImpl.class)\n    .create();\n</code></pre> <p>2 Group selector can be used as long as the subtype is valid for all group members. 4 Assuming <code>Address</code> is the superclass of <code>AddressImpl</code>.</p> <p>The same can be specified using <code>Settings</code>:</p> <pre><code>Settings settings = Settings.create()\n    .mapType(Pet.class, Cat.class)\n    .mapType(Collection.class, TreeSet.class)\n    .mapType(Set.class, TreeSet.class)\n    .mapType(Address.class, AddressImpl.class);\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    .create();\n</code></pre> <p>2 Note that this is not exactly equivalent to <code>subtype(field(Person::getPet), Cat.class)</code>, since the field selector is a more specific target.</p> <p>Finally, when specifying the mapping via <code>instancio.properties</code>:</p> <pre><code>subtype.java.util.Collection=java.util.TreeSet\nsubtype.java.util.Set=java.util.TreeSet\nsubtype.com.example.Pet=com.example.Cat\nsubtype.com.example.Address=com.example.AddressImpl\n</code></pre> <p>subtypes are resolved automatically:</p> <pre><code>Person person = Instancio.create(Person.class);\n\nassertThat(person.getPet()).isExactlyInstanceOf(Cat.class)\n</code></pre> <p>In addition to specifying subtypes using the API or properties file, subtypes can be resolved automatically by implementing the <code>InstancioServiceProvider</code> interface.</p>"},{"location":"user-guide/#using-models","title":"Using Models","text":"<p>A Model is a template for creating objects. It encapsulates all the parameters specified using the builder API. Once a model is defined, it can be used to create objects without duplicating the common properties.</p> Example: creating objects from a Model<pre><code>Model&lt;Person&gt; simpsonsModel = Instancio.of(Person.class)\n    .ignore(field(Person::getId))\n    .set(field(Person::getLastName), \"Simpson\")\n    .set(field(Address::getCity), \"Springfield\")\n    .generate(field(Person::getAge), gen -&gt; gen.ints().range(40, 50))\n    .toModel();\n\nPerson homer = Instancio.of(simpsonsModel)\n    .set(field(Person::getFirstName), \"Homer\")\n    .create();\n\nPerson marge = Instancio.of(simpsonsModel)\n    .set(field(Person::getFirstName), \"Marge\")\n    .create();\n</code></pre> <p>1 The <code>Model</code> class itself does not expose any public methods, and its instances are effectively immutable.</p> <p>Objects created from a model inherit all the model's properties, including Settings, Mode and seed value.</p> <p>A model can also be used as a template for creating other models. Using the previous example, we can define a new model with additional data:</p> <pre><code>Model&lt;Person&gt; simpsonsModelWithPets = Instancio.of(simpsonsModel)\n    .supply(field(Person::getPets), () -&gt; List.of(\n                new Pet(PetType.CAT, \"Snowball\"),\n                new Pet(PetType.DOG, \"Santa's Little Helper\"))\n    .toModel();\n</code></pre> <p>Having a common model allows test methods to create custom objects by overriding the model's properties via selectors (including properties of nested objects). This also works for immutable objects, such as Java records.</p> <pre><code>Person withNewAddress = Instancio.of(simpsonsModel)\n    .set(field(Address:getCity), \"Springograd\")\n    .create();\n</code></pre> <p>This approach reduces duplication and simplifies data setup, especially for complex classes with many fields and relationships. More details on the benefits of using models, including a sample project, are provided in the article Creating object templates using Models.</p>"},{"location":"user-guide/#using-setmodel","title":"Using <code>setModel()</code>","text":"<p>Experimental API <code>@since 4.4.0</code></p> <p>The method <code>setModel(TargetSelector, Model)</code> allows applying a model to another object using a selector.</p> <p>To illustrate with an example, we will assume the following classes:</p> <pre><code>record Foo(String value) {}\nrecord Container(Foo fooA, Foo fooB) {}\n</code></pre> <p>Given a model of <code>Foo</code>:</p> <pre><code>Model&lt;Foo&gt; fooModel = Instancio.of(Foo.class)\n    .set(field(Foo::value), \"foo\")\n    .toModel();\n</code></pre> <p>The model can be applied to a specific <code>Foo</code> field declared by the <code>Container</code>:</p> <pre><code>Container container = Instancio.of(Container.class)\n    .setModel(field(Container::fooA), fooModel)\n    .create();\n\n// Sample output: Container[fooA=Foo[value=\"foo\"], fooB=Foo[value=\"ANBQNR\"]]\n</code></pre> <p><code>setModel()</code> works by applying selectors defined within the model to the target object. In doing so, it narrows down the scope of selectors defined in the model, such as <code>field(Foo::value)</code>, to the model's target <code>field(Container::fooA)</code>, as shown in this diagram:</p> <p></p> <p>In other words, the <code>Container</code> creation example is equivalent to:</p> <pre><code>Container container = Instancio.of(Container.class)\n    .set(field(Foo::value).within(scope(Container::fooA)), \"foo\")\n    .create();\n</code></pre> <p><code>setModel()</code> works for all Instancio API methods that accept <code>TargetSelector</code> as an argument, such as <code>assign()</code>, <code>generate()</code>, <code>ignore()</code>, and so on. However, the following properties of the <code>Model</code> are not applied to the target object:</p> <ul> <li><code>Settings</code></li> <li><code>lenient()</code> mode</li> <li>custom seed value, if any</li> </ul>"},{"location":"user-guide/#overriding-selectors-defined-by-the-model","title":"Overriding Selectors Defined by the <code>Model</code>","text":"<p>When creating an object, it is possible to override selectors defined within the model. Building on the previous example, we can override <code>field(Foo::value)</code> as follows:</p> <pre><code>Container container = Instancio.of(Container.class)\n    .setModel(field(Container::fooA), fooModel)\n    .set(field(Foo::value).within(scope(Container::fooA)), \"bar\")\n    .create();\n\n// Sample output: Container[fooA=Foo[value=\"bar\"], fooB=Foo[value=\"ORVQFJF\"]]\n</code></pre> <p>3 This selector replaces the original selector defined by the <code>Model</code>.</p> <p>In this example, the overriding selector is the same as the model's selector (including the scope). If instead of:</p> <pre><code>.set(field(Foo::value).within(scope(Container::fooA)), \"bar\")\n</code></pre> <p>we specify:</p> <pre><code>.set(field(Foo::value), \"bar\")\n</code></pre> <p>Then the output will be:</p> <pre><code>Container[fooA=Foo[value=\"bar\"], fooB=Foo[value=\"bar\"]]\n</code></pre> <p>In addition, the original selector defined within the model will trigger an unused selector error. In such cases, the model's selector can be marked as <code>lenient()</code>:</p> <pre><code>Model&lt;Foo&gt; fooModel = Instancio.of(Foo.class)\n    .set(field(Foo::value).lenient(), \"foo\")\n    .toModel();\n</code></pre> <p>The reason for the error is that there are now two different selectors that match the same node <code>Foo.value</code>. This can be verified by calling <code>verbose()</code>, which will output all the selectors and matching nodes:</p> <pre><code>Container container = Instancio.of(Container.class)\n    .setModel(field(Container::fooA), fooModel)\n    .set(field(Foo::value).within(scope(Container::fooA)), \"bar\")\n    .verbose()\n    .create();\n</code></pre> <p>Will output:</p> <pre><code>Selectors and matching nodes, if any:\n\n -&gt; Method: generate(), set(), or supply()\n    - field(Foo, \"value\")\n       \\_ Node[Foo.value, depth=2, type=String]\n\n    - field(Foo, \"value\").within(scope(Container, \"fooA\")).lenient()\n       \\_ Node[Foo.value, depth=2, type=String]\n</code></pre> <p>The output confirms that there are two different selectors matching the node <code>Foo.value</code>, therefore selector with the lowest precedence will the trigger unused selector error unless it is marked as <code>lenient()</code>.</p> <p>In summary, when a <code>Model</code> is provided to the <code>setModel()</code> method, the selectors defined within the model will be subject to the usual selector precedence rules.</p>"},{"location":"user-guide/#custom-generators","title":"Custom Generators","text":"<p>Every type of object Instancio generates is through an implementation of the <code>Generator</code> interface. A number of internal generators are included out of the box for creating strings, numeric types, dates, collections, and so on. Custom generators can also be defined to satisfy certain use cases:</p> <ul> <li> <p>Generating types not supported out of the box, for example from third-party libraries such as Guava.</p> </li> <li> <p>Creating pre-initialised domain objects. Some domain objects require to be constructed in a certain state to be valid. To avoid duplicating the construction logic across different tests, it can be encapsulated by a custom generator that can be reused across the project.</p> </li> <li> <p>Distributing generators as a library that can be shared across projects.</p> </li> </ul> <p>The <code>Generator</code> is a functional interface with a single abstract method <code>generate(Random)</code>:</p> <pre><code>@FunctionalInterface\ninterface Generator&lt;T&gt; {\n\n    T generate(Random random);\n\n    default Hints hints() {\n        return null;\n    }\n}\n</code></pre> <p>If a generator produces random data, it must use the provided Random instance to guarantee that the created object can be reproduced for a given seed value. The <code>hints()</code> method is for passing additional instructions to the engine. The most important hint is the AfterGenerate action which determines whether the engine should:</p> <ul> <li>populate uninitialised fields</li> <li>modify the object by applying matching selectors (if any)</li> </ul> An example of specifying hints<pre><code>@Override\npublic Hints hints() {\n    return Hints.afterGenerate(AfterGenerate.APPLY_SELECTORS);\n}\n</code></pre> <p>In short, the <code>AfterGenerate</code> enum defines what should happen to an object returned by a generator. The exact semantics of <code>AfterGenerate</code> actions vary depending on the type of object. Different rules are applied to POJOs, arrays, collections, and records. For example, if a generator returns an instance of a <code>record</code>, the returned instance cannot be modified regardless of the <code>AfterGenerate</code> hint.</p> <p>The following describes the actions as they apply to POJOs:</p> <ul> <li> <p><code>DO_NOT_MODIFY</code></p> <p>Indicates that the object created by the generator should not be modified. The engine will treat the object as read-only and assign it to the target field as is. Matching selectors will not be applied.</p> </li> <li> <p><code>APPLY_SELECTORS</code></p> <p>Indicates that the object can only be modified via matching selectors using <code>set()</code>, <code>supply()</code>, and <code>generate()</code> methods.</p> </li> <li> <p><code>POPULATE_NULLS</code></p> <p>Indicates that <code>null</code> fields declared by the object should be populated. In addition, the object will be modifiable using selectors as described by above by <code>APPLY_SELECTORS</code>.</p> </li> <li> <p><code>POPULATE_NULLS_AND_DEFAULT_PRIMITIVES</code> (default behaviour)</p> <p>Indicates that primitive fields with default values declared by the object should be populated. In addition, the behaviour described by <code>POPULATE_NULLS</code> applies as well. Default primitives are defined as:</p> <ul> <li><code>0</code> for all numeric types</li> <li><code>false</code> for <code>boolean</code></li> <li><code>'\\u0000'</code> for <code>char</code></li> </ul> </li> <li> <p><code>POPULATE_ALL</code></p> <p>Indicates that all fields should be populated, regardless of their initial values. This action will cause all the values to be overwritten with random data. This is the default mode the engine operates in when using internal generators.</p> </li> </ul> <p>When defining custom array or collection generators, the following hints can also be used:</p> <ul> <li>ArrayHint</li> <li>CollectionHint</li> <li>MapHint</li> </ul>"},{"location":"user-guide/#custom-generator-example","title":"Custom Generator Example","text":"<p>To illustrate the above with an example, consider the following generator that creates an instance of a <code>Phone</code>:</p> <pre><code>class PhoneGenerator implements Generator&lt;Phone&gt; {\n\n    @Override\n    public Phone generate(Random random) {\n        int countryCodeLength = random.intRange(1, 3);\n\n        return Phone.builder()\n            .countryCode(\"+\" + random.digits(countryCodeLength))\n            .number(random.digits(8))\n            .build();\n    }\n}\n</code></pre> <p>Since no <code>hints()</code> are specified, the default <code>AfterGenerate</code> action is <code>POPULATE_NULLS_AND_DEFAULT_PRIMITIVES</code>. Therefore, the generated object can be customised using selectors:</p> <pre><code>Phone phone = Instancio.of(Phone.class)\n    .set(field(Phone::getCountryCode), \"+55\")\n    .create();\n</code></pre> <p>This will produce an object like <code>Phone[countryCode=\"+55\", number=\"83703291\"]</code>, where the <code>number</code> is set by the <code>PhoneGenerator</code>, and the <code>countryCode</code> is overridden by applying the selector. For certain use cases, it may be necessary to prevent deliberate or accidental modification of generated objects. In such cases, the generator can include the <code>DO_NOT_MODIFY</code> hint as shown below:</p> <pre><code>class PhoneGenerator implements Generator&lt;Phone&gt; {\n\n    @Override\n    public Phone generate(Random random) { /* same as before */ }\n\n    @Override\n    public Hints hints() {\n        return Hints.afterGenerate(AfterGenerate.DO_NOT_MODIFY);\n    }\n}\n</code></pre> <p>In summary, a generator can instantiate an object and instruct the engine what should be done with the object after <code>generate()</code> method returns using the <code>AfterGenerate</code> hint.</p> <p>Generating <code>record</code> objects</p> <p>It should be noted that if a generator returns an instance of a <code>record</code>, then the created object cannot be modified regardless of the <code>AfterGenerate</code> hint. This is due to immutability of records, since they cannot be modified after construction.</p> <p>Custom generators can also be specified using the Instancio Service Provider Interface</p>"},{"location":"user-guide/#assignment-settings","title":"Assignment Settings","text":"<p>Assignment settings control whether values are assigned directly to fields (default behaviour) or via setter methods. There are a few setting Keys that control the behaviour.</p> <code>Keys</code> constant Value type Default Description <code>ASSIGNMENT_TYPE</code> <code>AssignmentType</code> <code>FIELD</code> Should values be assigned via fields or setters <code>SETTER_STYLE</code> <code>SetterStyle</code> <code>SET</code> Naming convention used for setters <code>ON_SET_FIELD_ERROR</code> <code>OnSetFieldError</code> <code>IGNORE</code> What should happen if field assignment fails <code>ON_SET_METHOD_ERROR</code> <code>OnSetMethodError</code> <code>ASSIGN_FIELD</code> What should happen if method assignment fails <code>ON_SET_METHOD_NOT_FOUND</code> <code>OnSetMethodNotFound</code> <code>ASSIGN_FIELD</code> What should happen if a field does not have a matching setter <code>ON_SET_METHOD_UNMATCHED</code> <code>OnSetMethodUnmatched</code> <code>IGNORE</code> What should happen if a setter does not have a matching field <code>SETTER_EXCLUDE_MODIFIER</code> <code>int</code> <code>0</code> (none) Which setters should be ignored based on method modifiers <code>OVERWRITE_EXISTING_VALUES</code> <code>boolean</code> <code>true</code> Should initialised fields be overwritten with random values <p>To enable assignment via methods, <code>Keys.ASSIGNMENT_TYPE</code> can be set to <code>AssignmentType.METHOD</code>. This setting only applies to mutable fields because <code>final</code> fields cannot have setters. For non-static <code>final</code> fields Instancio will fall back to <code>AssignmentType.FIELD</code>.</p> <p>When method assignment is enabled, Instancio will attempt to resolve setter names from field names using <code>SETTER_STYLE</code> setting. This key's value is the <code>SetterStyle</code> enum that supports three naming conventions:</p> <ul> <li><code>SET</code> - standard setter prefix: <code>setFoo(\"value\")</code></li> <li><code>WITH</code> - for example: <code>withFoo(\"value\")</code></li> <li><code>PROPERTY</code> - no prefix: <code>foo(\"value\")</code></li> </ul> <p>There might be cases where a setter does not match any field using the configured naming convention. <code>ON_SET_METHOD_UNMATCHED</code> determines what happens in such cases. The default value is <code>OnSetMethodUnmatched.IGNORE</code>, therefore unmatched setters will not be invoked. The behaviour can be overridden by setting the value to <code>OnSetMethodUnmatched.INVOKE</code>.</p> <p>Special care must be taken when enabling unmatched setters in the presence of overloaded setters.</p> <p><code>SETTER_EXCLUDE_MODIFIER</code> specifies whether setters with certain method modifiers should be ignored (by default, there are no exclusions). For example, using this setting it is possible to instruct Instancio to ignore private and package-private setters.</p> <p>The remaining <code>ON_SET_*</code> keys are used to control error-handling behaviour:</p> Key Possible causes <code>ON_SET_FIELD_ERROR</code> type mismatch, unmodifiable field, access exception <code>ON_SET_METHOD_ERROR</code> type mismatch, an exception is thrown by setter (e.g. due to validation) <code>ON_SET_METHOD_NOT_FOUND</code> method does not exist, or the name does not conform to the naming convention defined by <code>SetterStyle</code> <p>All of the above can be set to ignore errors or fail fast by raising an exception. In addition, both <code>ON_SET_METHOD_*</code> settings can be configured to fall back to field assignment in case of an error.</p> <p>Setting <code>Keys.ON_SET_FIELD_ERROR</code> to <code>OnSetFieldError.IGNORE</code></p> <p>An error caused by assigning an incompatible type is considered a user error and is never ignored. For example, attempting to <code>set(allStrings(), 12345)</code> will always trigger an error regardless of the <code>ON_SET_FIELD_ERROR</code> setting.</p> <p>The following snippet illustrates how to create an object populated via setters. In this example, <code>SetterStyle.PROPERTY</code> is used since the <code>Phone</code> class has setters without the set prefix:</p> Populating via setters<pre><code>class Phone {\n    private String areaCode;\n    private String number;\n\n    void areaCode(String areaCode) {\n        this.areaCode = areaCode;\n    }\n\n    void number(String number) {\n        this.number = number;\n    }\n}\n\nSettings settings = Settings.create()\n        .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n        .set(Keys.SETTER_STYLE, SetterStyle.PROPERTY)\n        .set(Keys.ON_SET_METHOD_ERROR, OnSetMethodError.IGNORE);\n\nPhone phone = Instancio.of(Phone.class)\n        .withSettings(settings)\n        .create();\n</code></pre> <p>Settings can be specified per object, as shown above, or globally using a properties file:</p> <pre><code>assignment.type=METHOD\nsetter.style=PROPERTY\non.set.method.error=IGNORE\n</code></pre> <p>See Configuration for details.</p>"},{"location":"user-guide/#unmatched-setters","title":"Unmatched Setters","text":"<p>When <code>Keys.ASSIGNMENT_TYPE</code> is set to <code>METHOD</code>, Instancio parses fields and setters declared by a class. In addition, it attempts to match each field to the corresponding setter using its name and parameter type. If a setter does not have a matching field, it is treated as unmatched. This can be illustrated using the following <code>Person</code> class.</p> <pre><code>class Person {\n    private final Map&lt;String, String&gt; attributes = new HashMap&lt;&gt;();\n    private String name;\n\n    String getName() {\n        return name;\n    }\n\n    void setName(String name) {\n        this.name = name;\n    }\n\n    String getFavouriteFood() {\n        return attributes.get(\"FAVOURITE_FOOD\");\n    }\n\n    void setFavouriteFood(String favouriteFood) {\n        attributes.put(\"FAVOURITE_FOOD\", favouriteFood);\n    }\n}\n</code></pre> <p>The class has the <code>setName(String)</code> method that matches the <code>String name</code> field. In addition, it has the <code>setFavouriteFood(String)</code> method. This setter is unmatched because it does not have a corresponding <code>String favouriteFood</code> field.</p> Field Setter <code>String name</code> <code>setName(String)</code> Matched setter <code>-</code> <code>setFavouriteFood(String)</code> Unmatched setter"},{"location":"user-guide/#using-onsetmethodunmatchedinvoke","title":"Using <code>OnSetMethodUnmatched.INVOKE</code>","text":"<p>In the first example, we will create an object with the following settings and <code>verbose()</code> mode enabled:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withSettings(Settings.create()\n            .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n            .set(Keys.ON_SET_METHOD_NOT_FOUND, OnSetMethodNotFound.IGNORE)\n            .set(Keys.ON_SET_METHOD_UNMATCHED, OnSetMethodUnmatched.INVOKE))\n    .verbose()\n    .create();\n</code></pre> <p>3 Assign values via setter methods instead of fields. 4 Ignore fields that do not have a setter. 5 Invoke unmatched setters.</p> <p><code>verbose()</code> mode prints the node hierarchy to standard out:</p> <pre><code>&lt;0:Person&gt;\n \u251c\u2500\u2500&lt;1:Person: Map&lt;String, String&gt; attributes&gt;    // Field without a setter\n \u2502   \u251c\u2500\u2500&lt;2:String&gt;  // map key\n \u2502   \u2514\u2500\u2500&lt;2:String&gt;  // map value\n \u251c\u2500\u2500&lt;1:Person: String name; setName(String)&gt;      // Field with a setter\n \u2514\u2500\u2500&lt;1:Person: setFavouriteFood(String)&gt;          // Setter without a field (unmatched setter)\n</code></pre> <p>The following is a sample object generated by the snippet:</p> <pre><code>Person(name=OHARWES, attributes={FAVOURITE_FOOD=JRKB})\n</code></pre> <p>The <code>attributes</code> map was not populated with random entries because <code>ON_SET_METHOD_NOT_FOUND</code> was set to <code>OnSetMethodNotFound.IGNORE</code>. However, since <code>ON_SET_METHOD_UNMATCHED</code> was set to <code>OnSetMethodUnmatched.INVOKE</code>, Instancio invoked the <code>setFavouriteFood</code> method passing in a random value. Therefore, the map contains a <code>FAVOURITE_FOOD</code> entry.</p> <p>Next, we will set <code>ON_SET_METHOD_NOT_FOUND</code> to <code>OnSetMethodNotFound.ASSIGN_FIELD</code>, keeping everything else the same:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withSettings(Settings.create()\n            .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n            .set(Keys.ON_SET_METHOD_NOT_FOUND, OnSetMethodNotFound.ASSIGN_FIELD)\n            .set(Keys.ON_SET_METHOD_UNMATCHED, OnSetMethodUnmatched.INVOKE))\n    .verbose()\n    .create();\n</code></pre> <p>This time, a sample output might look as follows:</p> <pre><code>Person(name=EJH, attributes={YQJ=CDQVQVL, WTUHE=GWXZ, FAVOURITE_FOOD=XCF, TYLHQJ=GKDIH})\n</code></pre> <p>In the above example, Instancio generates a map with random values and assigns it directly via the field since it does not have a setter. <code>setFavouriteFood</code> is also invoked, which adds the <code>FAVOURITE_FOOD</code> entry to the map.</p>"},{"location":"user-guide/#using-onsetmethodunmatchedignore","title":"Using <code>OnSetMethodUnmatched.IGNORE</code>","text":"<p>In the next example, we modify the above snippet to set <code>ON_SET_METHOD_UNMATCHED</code> to <code>OnSetMethodUnmatched.IGNORE</code>:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withSettings(Settings.create()\n            .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n            .set(Keys.ON_SET_METHOD_NOT_FOUND, OnSetMethodNotFound.IGNORE)\n            .set(Keys.ON_SET_METHOD_UNMATCHED, OnSetMethodUnmatched.IGNORE))\n    .verbose()\n    .create();\n</code></pre> <p>Since unmatched setters are ignored, the node hierarchy does not have the <code>&lt;1:Person: setFavouriteFood(String)&gt;</code> node:</p> <pre><code>&lt;0:Person&gt;\n \u251c\u2500\u2500&lt;1:Person: Map&lt;String, String&gt; attributes&gt;\n \u2502   \u251c\u2500\u2500&lt;2:String&gt;\n \u2502   \u2514\u2500\u2500&lt;2:String&gt;\n \u2514\u2500\u2500&lt;1:Person: String name; setName(String)&gt;\n</code></pre> <p>The sample output contains an empty map since the unmatched setter was not invoked:</p> <pre><code>Person(name=NQMNABNBM, attributes={})\n</code></pre> <p>If we modify the last example to set <code>Keys.ON_SET_METHOD_NOT_FOUND</code> to <code>OnSetMethodNotFound.ASSIGN_FIELD</code>, then the <code>attributes</code> map will be populated with random entries but no <code>FAVOURITE_FOOD</code>.</p>"},{"location":"user-guide/#overloaded-unmatched-setters","title":"Overloaded unmatched setters","text":"<p>Special care must be taken when a field has more than one setter. Consider the following class with two <code>setValue</code> methods:</p> <pre><code>class Pojo {\n    private int value;\n\n    int getValue() {\n        return value;\n    }\n\n    void setValue(int value) {\n        System.out.println(\"setValue(int) called with: \" + value);\n        this.value = value;\n    }\n\n    void setValue(double value) {\n        System.out.println(\"setValue(double) called with: \" + value);\n        this.value = (int) value;\n    }\n}\n</code></pre> <p>At first glance, the following example should produce the <code>value</code> field set to <code>123</code>:</p> <pre><code>Pojo pojo = Instancio.of(Pojo.class)\n    .withSettings(Settings.create()\n            .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n            .set(Keys.ON_SET_METHOD_UNMATCHED, OnSetMethodUnmatched.INVOKE))\n    .set(field(Pojo::getValue), 123)\n    .verbose()\n    .create();\n</code></pre> <p>However, running the snippet will produce the following output:</p> <pre><code>setValue(int) called with: 123\nsetValue(double) called with: 7387.1580772\n</code></pre> <p>This is because <code>ON_SET_METHOD_UNMATCHED</code> is set to <code>OnSetMethodUnmatched.INVOKE</code>, which results in two nodes related to the <code>value</code> field:</p> <pre><code>&lt;0:Pojo&gt;\n \u251c\u2500\u2500&lt;1:Pojo: int value; setValue(int)&gt;      // field with matching setter\n \u2514\u2500\u2500&lt;1:Pojo: setValue(double)&gt;              // unmatched setter without a field\n</code></pre> <p>Instancio would populate each of these nodes. Nodes that have fields are populated first, and nodes without fields (unmatched setters) are last. The reason for this is that unmatched setters often require fields to be initialised before being invoked (for instance, an unmatched setter might be adding an element to a collection).</p> <p>Therefore, for the above snippet to produce the expected value of <code>123</code>, the <code>setValue(double)</code> method would need to be ignored (or <code>ON_SET_METHOD_UNMATCHED</code> set to <code>OnSetMethodUnmatched.IGNORE</code>):</p> <pre><code>Pojo pojo = Instancio.of(Pojo.class)\n    .withSettings(Settings.create()\n            .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD)\n            .set(Keys.ON_SET_METHOD_UNMATCHED, OnSetMethodUnmatched.INVOKE))\n    .set(field(Pojo::getValue), 123)\n    .ignore(setter(Pojo.class, \"setValue\", double.class))\n    .create();\n</code></pre> <p>6 Because the method is overloaded, the selector <code>setter(Pojo.class, \"setValue\", double.class)</code> must be used to specify the parameter explicitly, instead of the more concise <code>setter(Pojo::setValue)</code>.</p>"},{"location":"user-guide/#initialised-fields","title":"Initialised Fields","text":"<p>The setting <code>Keys.OVERWRITE_EXISTING_VALUES</code> controls whether Instancio can overwrite initialised fields with random values. \"Initialised\" is defined as having a non-default value. Default values are:</p> <ul> <li><code>0</code> for <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, and <code>char</code></li> <li><code>false</code> for <code>boolean</code></li> <li><code>null</code> for <code>Object</code></li> </ul> <p>Below are a few examples of how this setting works using the following class (getters and setters omitted):</p> <pre><code>class Foo {\n    String value = \"initial\";\n}\n</code></pre> <p>By default, <code>OVERWRITE_EXISTING_VALUES</code> is set to <code>true</code>. As a result, Instancio overwrites initialised fields with random values.</p> Default behaviour<pre><code>Foo foo = Instancio.create(Foo.class);\n\n// Sample output: Foo[value=VEQHJ]\n</code></pre> <p>When <code>OVERWRITE_EXISTING_VALUES</code> is set to false <code>false</code>, the initialised value is preserved.</p> Preserve initialised values<pre><code>Foo foo = Instancio.of(Foo.class)\n    .set(Keys.OVERWRITE_EXISTING_VALUES, false)\n    .create();\n\n// Output: Foo[value=initial]\n</code></pre> <p>Finally, regardless of the <code>OVERWRITE_EXISTING_VALUES</code> setting, initialised values can be overwritten using a selector.</p> Overwrite initialised value using a selector<pre><code>Foo foo = Instancio.of(Foo.class)\n    .set(Keys.OVERWRITE_EXISTING_VALUES, false)\n    .set(field(Foo::getValue), \"Hello\")\n    .create();\n\n// Output: Foo[value=Hello]\n</code></pre>"},{"location":"user-guide/#maximum-depth-setting","title":"Maximum Depth Setting","text":"<p>This setting controls the maximum depth for populating an object. Instancio will populate values up to the maximum depth. Beyond that, values will be <code>null</code> unless the maximum depth is set to a higher value.</p> <p>The count starts from the root object, which is at depth 0. Children of the root object are at depth 1, grandchildren at depth 2, and so on. The default value is defined by the <code>Keys.MAX_DEPTH</code> setting key.</p> <p>The primary reasons for modifying this setting are:</p> <ul> <li> <p>To improve the performance.</p> <p>The performance may be inadequate when generating data for large complex classes. Consider reducing the maximum depth value in such cases (and also, using <code>ignore()</code> to exclude certain objects).</p> </li> <li> <p>To generate data beyond the default maximum depth.</p> <p>If the default maximum depth is not sufficient to fully populate an object, consider increasing the value.</p> </li> </ul>"},{"location":"user-guide/#modifying-maximum-depth","title":"Modifying Maximum Depth","text":"<p>The setting can be set to a custom value using one of the following options, from lowest to highest precedence.</p> <p>Using <code>instancio.properties</code> to define a new global maximum depth:</p> <pre><code>max.depth=15\n</code></pre> <p>Using Settings with <code>Keys.MAX_DEPTH</code> key.</p> <pre><code>Settings settings = Settings.create().set(Keys.MAX_DEPTH, 15);\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    .create();\n</code></pre> <p>Using the API method withMaxDepth(int):</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withMaxDepth(15)\n    .create();\n</code></pre>"},{"location":"user-guide/#cyclic-objects","title":"Cyclic Objects","text":"<p>Data models often have circular relationships. A common example is a one-to-many relationship among JPA entities. Consider the following example where each <code>OrderItem</code> references the <code>Order</code> to which it belongs (getters and setters omitted for brevity):</p> <pre><code>class Order {\n    Long id;\n    List&lt;OrderItem&gt; items;\n}\n\nclass OrderItem {\n    Long id;\n    Order order;\n}\n</code></pre> <p>The default behaviour of Instancio is to terminate cycles with a <code>null</code> reference. For example, the following snippet will produce <code>OrderItem.order</code> references set to <code>null</code>:</p> <pre><code>Order order = Instancio.create(Order.class);\n\n// Sample output:\n// Order(id=2132, items=[OrderItem(id=9318, order=null), OrderItem(id=6077, order=null)])\n</code></pre> <p>It is, however, possible to set a back-reference to the root object instead of generating <code>null</code>. One way to accomplish this is using the <code>assign()</code> API:</p> <pre><code>Order order = Instancio.of(Order.class)\n    .assign(valueOf(root()).to(OrderItem::getOrder))\n    .create();\n\nassertThat(order.getItems()).allSatisfy(item -&gt;\n    assertThat(item.getOrder()).isSameAs(order));\n</code></pre> <p>An alternative option is to assign back-references automatically using the <code>Keys.SET_BACK_REFERENCES</code> setting. The following snippet will produce the same result as the example above:</p> <pre><code>Settings settings = Settings.create().set(Keys.SET_BACK_REFERENCES, true);\n\nOrder order = Instancio.of(Order.class)\n    .withSettings(settings)\n    .create();\n</code></pre> <p>1 Note that this setting must be enabled explicitly using <code>Settings</code> or <code>instancio.properties</code></p> <p>When this setting is enabled, Instancio will set the <code>OrderItem.order</code> reference to a previously generated <code>Order</code> instance. In this example it happens to be the root object.</p> <p>It should be noted that in certain cases, enabling <code>SET_BACK_REFERENCES</code> may produce unwanted results. Consider the following example of creating an <code>OrderItem</code>:</p> <pre><code>OrderItem item = Instancio.of(OrderItem.class)\n    .withSettings(Settings.create().set(Keys.SET_BACK_REFERENCES, true))\n    .create();\n</code></pre> <p>This will produce the following objects:</p> <pre><code>graph LR\n  A[OrderItem] --&gt; B[Order];\n  B --&gt; C[\"List&amp;lt;OrderItem&amp;gt;\"];</code></pre> <p>where all elements of <code>List&lt;OrderItem&gt;</code> are the same instance of the <code>OrderItem</code>.</p>"},{"location":"user-guide/#cartesian-product","title":"Cartesian Product","text":"<p>Experimental API <code>@since 4.0.0</code></p> <p>The following methods are the entry points for generating the Cartesian product:</p> Cartesian Product API<pre><code>Instancio.ofCartesianProduct(Class&lt;T&gt; type)\nInstancio.ofCartesianProduct(TypeTokenSupplier&lt;T&gt; supplier)\nInstancio.ofCartesianProduct(Model&lt;T&gt; model)\n</code></pre> <p>Inputs can be specified using the following method:</p> <pre><code>with(TargetSelector, Object...)\n</code></pre> <p>As an example, consider the snippet below.</p> <pre><code>record Widget(String type, int num) {}\n\nList&lt;Widget&gt; results = Instancio.ofCartesianProduct(Widget.class)\n    .with(field(Widget::type), \"FOO\", \"BAR\", \"BAZ\")\n    .with(field(Widget::num), 1, 2, 3)\n    .create();\n</code></pre> <p>This will produce a list containing 9 results in lexicographical order:</p> <pre><code>[Widget[type=FOO, num=1],\n Widget[type=FOO, num=2],\n Widget[type=FOO, num=3],\n Widget[type=BAR, num=1],\n Widget[type=BAR, num=2],\n Widget[type=BAR, num=3],\n Widget[type=BAZ, num=1],\n Widget[type=BAZ, num=2],\n Widget[type=BAZ, num=3]]\n</code></pre>"},{"location":"user-guide/#limitations","title":"Limitations","text":"<p>The selector passed to the <code>with()</code> method must match a single target. For example, the target cannot be a collection element:</p> <pre><code>record Widget(String type, int num) {}\nrecord Container(List&lt;Widget&gt; widgets) {}\n\nList&lt;Container&gt; results = Instancio.ofCartesianProduct(Container.class)\n    .with(field(Widget::type), \"FOO\", \"BAR\", \"BAZ\")\n    .with(field(Widget::num), 1, 2, 3)\n    .create();\n}\n</code></pre> <p>The above will produce an error with a message: <code>\"no item is available to emit()\"</code>.</p>"},{"location":"user-guide/#bean-validation","title":"Bean Validation","text":"<p>Instancio can generate valid data based on Bean Validation annotations. This is an experimental feature and is disabled by default.</p> <p>The feature can be enabled via Settings using <code>Keys.BEAN_VALIDATION_ENABLED</code>, or globally, using <code>instancio.properties</code>:</p> <pre><code>bean.validation.enabled=true\n</code></pre> <p>Instancio supports annotations from:</p> <ul> <li><code>jakarta.validation.constraints</code></li> <li><code>javax.validation.constraints</code></li> <li><code>org.hibernate.validator.constraints</code></li> </ul> <p>It will generate data based on the constraints, depending on what is available on the classpath. Instancio does not provide the dependencies transitively.</p> <code>jakarta.validation</code><code>javax.validation</code><code>hibernate</code> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;\n    &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;\n    &lt;version&gt;${jakarta-validation-api-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;javax.validation&lt;/groupId&gt;\n    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;\n    &lt;version&gt;${javax-validation-api-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n    &lt;version&gt;${hibernate-validator-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>By default, Instancio reads annotations from fields. The behaviour can be customised to read annotations from getters instead. This can be done using the <code>Keys.BEAN_VALIDATION_TARGET</code> setting or <code>instancio.properties</code>:</p> <pre><code>bean.validation.target=GETTER\n</code></pre>"},{"location":"user-guide/#supported-annotations","title":"Supported Annotations","text":"<p>The list of supported annotations is provided below. Anything not listed is unsupported, including <code>*.List</code> annotations.</p>"},{"location":"user-guide/#jakarta-or-javax","title":"Jakarta or Javax","text":"<ul> <li><code>@AssertFalse</code></li> <li><code>@AssertTrue</code></li> <li><code>@DecimalMax</code></li> <li><code>@DecimalMin</code></li> <li><code>@Digits</code></li> <li><code>@Email</code></li> <li><code>@Future</code> (not supported by <code>MonthDay</code>)</li> <li><code>@FutureOrPresent</code> (delegates to <code>Future</code>)</li> <li><code>@Max</code></li> <li><code>@Min</code></li> <li><code>@Negative</code></li> <li><code>@NegativeOrZero</code></li> <li><code>@NotBlank</code> (delegates to <code>NotEmpty</code>)</li> <li><code>@NotEmpty</code></li> <li><code>@NotNull</code></li> <li><code>@Past</code> (not supported by <code>MonthDay</code>)</li> <li><code>@PastOrPresent</code> (delegates to <code>Past</code>)</li> <li><code>@Positive</code></li> <li><code>@PositiveOrZero</code></li> <li><code>@Size</code></li> </ul>"},{"location":"user-guide/#hibernate","title":"Hibernate","text":""},{"location":"user-guide/#standard","title":"Standard","text":"<ul> <li><code>@CreditCardNumber</code></li> <li><code>@DurationMin</code></li> <li><code>@DurationMax</code></li> <li><code>@EAN</code></li> <li><code>@ISBN</code></li> <li><code>@Length</code></li> <li><code>@LuhnCheck</code> (<code>ignoreNonDigitCharacters</code> is ignored, only digits are generated)</li> <li><code>@Mod10Check</code> (<code>ignoreNonDigitCharacters</code> is ignored, only digits are generated)</li> <li><code>@Mod11Check</code> (<code>ignoreNonDigitCharacters</code> is ignored, only digits are generated)</li> <li><code>@Range</code></li> <li><code>@UniqueElements</code></li> <li><code>@URL</code> (<code>protocol</code>, <code>host</code>, <code>port</code> are supported; <code>regexp</code> not supported)</li> <li><code>@UUID</code></li> </ul>"},{"location":"user-guide/#brazilian","title":"Brazilian","text":"<ul> <li><code>@CNPJ</code></li> <li><code>@CPF</code></li> <li><code>@TituloEleitoral</code></li> </ul>"},{"location":"user-guide/#polish","title":"Polish","text":"<ul> <li><code>@NIP</code></li> <li><code>@PESEL</code></li> <li><code>@REGON</code></li> </ul>"},{"location":"user-guide/#russian","title":"Russian","text":"<ul> <li><code>@INN</code></li> </ul>"},{"location":"user-guide/#jpa","title":"JPA","text":"<p>In addition to Bean Validation, Instancio supports generating data based on JPA <code>@Column</code> annotation. This is an experimental feature available from version <code>3.3.0</code>. It is disabled by default and can be enabled via Settings using <code>Keys.JPA_ENABLED</code>, or globally, using <code>instancio.properties</code>:</p> <pre><code>jpa.enabled=true\n</code></pre> <p>In addition, <code>jakarta</code> or <code>javax</code> API must be present on the classpath for the feature to be activated. Instancio does not provide the dependency transitively:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;\n    &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;\n    &lt;version&gt;${jakarta-persistence-api-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>or</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;javax.persistence&lt;/groupId&gt;\n    &lt;artifactId&gt;javax.persistence-api&lt;/artifactId&gt;\n    &lt;version&gt;${javax-persistence-api-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Warning</p> <p>If you are using Hibernate with bytecode enhancement enabled, you may need to ignore fields with names starting with <code>$$_</code>.</p>"},{"location":"user-guide/#supported-attributes","title":"Supported Attributes","text":"<p>The following <code>@Column</code> attributes are supported:</p> <ul> <li><code>precision</code> - supported by <code>Float</code>, <code>Double</code>, and <code>BigDecimal</code> fields (with limitations described below)</li> <li><code>scale</code> - supported by <code>Float</code>, <code>Double</code>, and <code>BigDecimal</code> fields</li> <li><code>length</code> - supported by <code>String</code> fields</li> </ul>"},{"location":"user-guide/#limitations_1","title":"Limitations","text":"<p>If used with <code>Keys.BEAN_VALIDATION_ENABLED</code>, Bean Validation annotations take precedence. For instance, the <code>precision</code> attribute is not honoured if a field is annotated with any of the following Bean Validation/Hibernate Validator annotations:</p> <ul> <li><code>@Min</code>, <code>@Max</code></li> <li><code>@DecimalMin</code>, <code>@DecimalMax</code></li> <li><code>@Negative</code>, <code>@NegativeOrZero</code></li> <li><code>@Positive</code>, <code>@PositiveOrZero</code></li> <li><code>@Range</code></li> </ul> <p>To illustrate with an example, consider the following field declaration:</p> <pre><code>@Column(precision = 5, scale = 3)\n@Min(1)\n@Max(7)\nprivate BigDecimal value;\n</code></pre> <p><code>precision = 5, scale = 3</code> implies a range of <code>[10.000, 99.999]</code>, whereas the <code>@Min</code> and <code>@Max</code> limit the range to <code>[1, 7]</code>. Since the <code>@Min</code> and <code>@Max</code> annotations take precedence, the <code>precision</code> attribute will be ignored, and the generated <code>value</code> will be between <code>1.000</code> and <code>7.000</code>, inclusive, and have the specified scale of <code>3</code>.</p>"},{"location":"user-guide/#data-feeds","title":"Data Feeds","text":"<p>Experimental API <code>@since 5.0.0</code></p> <p>Some tests are better expressed when test data is defined in an external resource. This is especially true when tests require a large or complex dataset, making it impractical to define the data within the test class. The Feed interface has been added to simplify working with data from external sources.</p> <p>There are several methods for creating a feed, detailed in the following sections. For demonstration purposes, we will use a <code>persons.csv</code> file located at the root of the classpath (e.g., <code>src/test/resources/persons.csv</code>):</p> <p>The sample data is referenced in all subsequent examples.</p> persons.csv (formatted for clarity)<pre><code>firstName, lastName, dateOfBirth, gender\nJohn,      Doe,      2001-11-22,  MALE\nAlice,     Smith,    1977-07-15,  FEMALE\nBob,       Brown,    1999-12-01,  MALE\n# snip...\n</code></pre> <p>and the <code>Person</code> class defined as:</p> <pre><code>// Getters and setters omitted for brevity\nclass Person {\n    Long id;\n    String firstName;\n    String lastName;\n    LocalDate dateOfBirth;\n    Gender gender;\n}\n</code></pre>"},{"location":"user-guide/#using-applyfeed","title":"Using <code>applyFeed()</code>","text":"<p>The <code>applyFeed()</code> method allows creating a feed using the <code>FeedProvider</code> API and mapping the feed data to a POJO or a <code>record</code> using a selector:</p> <pre><code>applyFeed(TargetSelector, FeedProvider)\n</code></pre> <p>Here's an example that maps data from the <code>persons.csv</code> file to <code>Person</code> objects:</p> <pre><code>List&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .size(10)\n    .applyFeed(all(Person.class), feed -&gt; feed.ofResource(\"persons.csv\"))\n    .create();\n\n// Output:\n// [Person[id=1083, firstName=\"John\", lastName=\"Doe\", dateOfBirth=2001-11-22, gender=MALE],\n//  Person[id=9485, firstName=\"Alice\", lastName=\"Smith\", dateOfBirth=1977-07-15, gender=FEMALE],\n//  Person[id=3576, firstName=\"Bob\", lastName=\"Brown\", dateOfBirth=1999-12-01, gender=MALE],\n//  ...snip...]\n</code></pre> <p>The mapping works as follows:</p> <ul> <li>Data properties are mapped to matching field names declared by the class.</li> <li>Class fields that do not have a corresponding property in the data file are populated with random values (such as the <code>id</code> field in the previous example).</li> <li>If a data property does not map to any field in the target class, an exception will be thrown.   To ignore unmatched properties, set the <code>Keys.ON_FEED_PROPERTY_UNMATCHED</code>   setting to <code>OnFeedPropertyUnmatched.IGNORE</code>.</li> </ul>"},{"location":"user-guide/#custom-feeds","title":"Custom Feeds","text":"<p>Custom feeds can be created by extending the Feed interface:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {}\n</code></pre> <p>Defining a custom feed allows reusing it across multiple tests, avoiding the need to hard-code the file name:</p> <pre><code>List&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class))\n    .create();\n</code></pre> <p>In addition to passing the<code>PersonFeed</code> class to the <code>applyFeed()</code> method, we can also instantiate an instance of the feed using the methods below. The first method is a shorthand API, while the second is a builder that can be used to customise an instance of a feed:</p> <pre><code>Instancio.createFeed(Class&lt;F&gt; feedClass)\nInstancio.ofFeed(Class&lt;F&gt; feedClass).create()\n</code></pre> An example of creating a feed instance<pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n</code></pre> <p>While <code>PersonFeed</code> does not declare any methods, it inherits several convenience methods from <code>Feed</code> for accessing specific data properties, such as the <code>lastName</code>. For example, to create an instance of the <code>PersonFeed</code> and populate only the last names:</p> <pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n\nList&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .generate(field(Person::getLastName), personFeed.stringSpec(\"lastName\"))\n    .create();\n</code></pre> <p>The <code>stringSpec()</code> method is an example of a \"feed spec\", which will be described in more detail in the next section.</p>"},{"location":"user-guide/#feed-specs","title":"Feed Specs","text":"<p>The <code>Feed</code> interface provides various methods for retrieving data. These methods return a <code>FeedSpec&lt;T&gt;</code> and automatically convert values to the specified type <code>T</code> (see Default String Conversion for the list of supported types):</p> <pre><code>FeedSpec&lt;String&gt; stringSpec(String propertyName);\nFeedSpec&lt;Boolean&gt; booleanSpec(String propertyName);\nFeedSpec&lt;Integer&gt; intSpec(String propertyName);\n// ...\n</code></pre> <p>From here on, we will refer to methods that return a <code>FeedSpec</code> as feed specs.</p> <p>In addition to the built-in methods, Instancio supports defining custom feed specs. By convention, method names automatically map to the corresponding properties in the data feed.</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    FeedSpec&lt;String&gt; lastName();\n\n    FeedSpec&lt;Integer&gt; age();\n}\n</code></pre> <p>By declaring an explicit method such as <code>lastName()</code>, we can avoid calling <code>stringSpec(\"lastName\")</code> with a hard-coded property name.</p> <pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n\nList&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .generate(field(Person::getLastName), personFeed.lastName())\n    .create();\n</code></pre> <p>To summarise, feed data can be accessed using:</p> <ul> <li>built-in feed spec methods: <code>stringSpec(\"lastName\")</code>, <code>intSpec(\"age\")</code></li> <li>user-defined feed spec methods: <code>lastName()</code>, <code>age()</code></li> </ul>"},{"location":"user-guide/#using-feed-specs","title":"Using Feed Specs","text":"<p>The <code>FeedSpec</code> type supports a couple of different use cases. Under the hood, the <code>FeedSpec</code> type is an implementation of a <code>Generator</code>. Therefore, it can be passed to the <code>supply()</code> and <code>generate()</code> methods as demonstrated earlier. Moreover, the <code>FeedSpec</code> interface extends ValueSpec, which provides methods such as <code>get()</code> and <code>list()</code> for generating values:</p> <pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n\nString firstName = personFeed.firstName().get(); // John\n\nList&lt;String&gt; firstNamesList = personFeed.firstName().list(10); // [John, Alice, Bob, ...]\n\nint yearOfBirth = personFeed.dateOfBirth().map(LocalDate::getYear);\n</code></pre> <p>See Creating Simple Values for a summary of <code>ValueSpec</code> methods.</p> <p>In addition, feed spec methods support the following annotations:</p> <ul> <li><code>@AliasSpec</code></li> <li><code>@TemplateSpec</code></li> <li><code>@GeneratedSpec</code></li> <li><code>@FunctionSpec</code></li> <li><code>@WithStringMapper</code></li> <li><code>@WithPostProcessor</code></li> <li><code>@NullableSpec</code></li> </ul>"},{"location":"user-guide/#aliasspec","title":"<code>@AliasSpec</code>","text":"<p>This annotation allows mapping a data property using the annotation attribute instead of the spec method name. This decouples method names from specific data properties:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n    @AliasSpec(\"lastName\")\n    FeedSpec&lt;String&gt; surname();\n}\n</code></pre> <p>3 Specifies that the <code>surname()</code> method corresponds to the <code>lastName</code> property in the data feed.</p> <p>This approach removes the requirement for method names to match exact data property names.</p>"},{"location":"user-guide/#templatespec","title":"<code>@TemplateSpec</code>","text":"<p>The <code>@TemplateSpec</code> annotation enables the definition of spec methods using string templates with <code>${placeholders}</code>:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n    @AliasSpec(\"lastName\")\n    FeedSpec&lt;String&gt; surname();\n\n    @TemplateSpec(\"Hello ${firstName} ${surname}\")\n    FeedSpec&lt;String&gt; greeting();\n}\n</code></pre> <p>In the example above, placeholders like <code>${firstName}</code> and <code>${surname}</code> can directly map to data properties or other feed spec method names.</p> <p>When invoking the <code>greeting()</code> method with the <code>persons.csv</code> data defined earlier, it produces the following output:</p> <pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n\npersonFeed().greeting().get(); // Hello John Doe\npersonFeed().greeting().get(); // Hello Alice Smith\n// snip...\n</code></pre>"},{"location":"user-guide/#generatedspec","title":"<code>@GeneratedSpec</code>","text":"<p>The <code>@GeneratedSpec</code> annotation allows defining feed specs that generate data not present in the data file, but rather by using a specified generator.</p> <p>Here's an example using <code>@GeneratedSpec</code> to generate random <code>lastModified</code> values that are in the past:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    @GeneratedSpec(PastInstantGenerator.class)\n    FeedSpec&lt;Instant&gt; lastModified();\n\n    class PastInstantGenerator implements Generator&lt;Instant&gt; {\n        @Override\n        public Instant generate(Random random) {\n            long nanosAgo = random.longRange(1, Long.MAX_VALUE);\n            return Instant.now().minusNanos(nanosAgo);\n        }\n    }\n}\n</code></pre> <p>In this example, the <code>lastModified()</code> method in <code>PersonFeed</code> uses <code>@GeneratedSpec</code> to specify <code>PastInstantGenerator</code> as the generator for <code>Instant</code> values. This approach allows for generation of data that complements existing data in the feed.</p>"},{"location":"user-guide/#functionspec","title":"<code>@FunctionSpec</code>","text":"<p>The <code>@FunctionSpec</code> annotation enables combining inputs from one or more data properties or spec methods to produce a result using a specified <code>FunctionProvider</code>. It has two attributes:</p> <ul> <li><code>params</code> - specifies the names of data properties or spec methods used as inputs.</li> <li><code>provider</code> - refers to a class implementing <code>FunctionProvider</code>, which processes inputs and returns a result.</li> </ul> <p>For example, the following snippet generates a person's bio from the <code>firstName</code>, <code>lastName</code>, and <code>dateOfBirth</code> properties:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    @FunctionSpec(params = {\"firstName\", \"lastName\", \"dateOfBirth\"}, provider = BioProvider.class)\n    FeedSpec&lt;String&gt; bio();\n\n    class BioProvider implements FunctionProvider {\n\n        String describePerson(String firstName, String lastName, LocalDate dateOfBirth) {\n            int age = Period.between(dateOfBirth, LocalDate.now()).getYears();\n            return String.format(\"%s %s is %d years old\", firstName, lastName, age);\n        }\n    }\n}\n</code></pre> <p>The <code>@FunctionSpec.provider</code> annotation attribute is a reference to a class implementing the <code>FunctionProvider</code>. The <code>FunctionProvider</code> implementations must have exactly one method matching the <code>@FunctionSpec.params</code>.</p> <p>Additionally, <code>org.instancio.Random</code> can be declared as the last parameter if randomisation is required. For instance, the method declared by <code>BioProvider</code> can also be defined as:</p> <pre><code>String describePerson(String firstName, String lastName, LocalDate dateOfBirth, Random random) {\n    // ...\n}\n</code></pre> <p>where the <code>random</code> instance can be used to randomise the output (if necessary) with the usual reproducibility guarantees.</p> <p>If <code>Random</code> is declared, it must be the last parameter.</p>"},{"location":"user-guide/#withstringmapper","title":"<code>@WithStringMapper</code>","text":"<p>This annotation allows you to specify a custom <code>Function</code> for converting string values to a type that is not supported out of the box.</p> <p>For example, suppose we need a specific property as a byte array:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    @WithStringMapper(StringByteArrayMapper.class)\n    FeedSpec&lt;byte[]&gt; firstName();\n\n    class StringByteArrayMapper implements Function&lt;String, ByteArray&gt; {\n        public String process(String input) {\n            return input.getBytes();\n        }\n    }\n}\n</code></pre> <p>4 Specifies the function class for the mapping. 5 The type <code>byte[]</code> is the type returned by the mapping function.</p> <p><code>@WithStringMapper</code> can also be used with methods annotated with <code>@AliasSpec</code>:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    FeedSpec&lt;String&gt; firstName();\n\n    @WithStringMapper(StringByteArrayMapper.class)\n    @AliasSpec(\"firstName\")\n    FeedSpec&lt;byte[]&gt; firstNameAsBytes();\n}\n</code></pre> <p><code>@WithStringMapper</code> is ignored when applied to <code>@FunctionSpec</code>, <code>@GeneratedSpec</code>, or <code>@TemplateSpec</code> spec methods.</p>"},{"location":"user-guide/#withpostprocessor","title":"<code>@WithPostProcessor</code>","text":"<p>This annotation enables post-processing of values returned by feed specs using an implementation of the <code>PostProcessor</code> interface:</p> <pre><code>public interface PostProcessor&lt;T&gt; {\n    T process(T input, Random random);\n}\n</code></pre> <p>Using the <code>PersonFeed</code> as an example, a post-processor can be used to convert names to uppercase:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n\n    @WithPostProcessor(UpperCaseConverter.class)\n    FeedSpec&lt;String&gt; firstName();\n\n    class UpperCaseConverter implements PostProcessor&lt;String&gt; {\n        public String process(String input, Random random) {\n            return input.toUpperCase();\n        }\n    }\n}\n</code></pre> <p>Invoking the <code>firstName()</code> method using the <code>persons.csv</code> defined earlier produces the following output:</p> <pre><code>PersonFeed personFeed = Instancio.createFeed(PersonFeed.class);\n\npersonFeed().firstName().list(3); // [JOHN, ALICE, BOB]\n</code></pre> <p>The <code>@WithPostProcessor</code> annotation can be combined with any other annotation described earlier. In addition, a spec method can define multiple post-processors. This is shown in the following example, where two post-processors are applied to the <code>@TemplateSpec</code>:</p> <pre><code>@WithPostProcessor({UpperCaseConverter.class, QuoteAppener.class})\n@TemplateSpec(\"${firstName} ${lastName}\")\nFeedSpec&lt;String&gt; fullName();\n</code></pre> <p>The above snippet will result in the following output:</p> <pre><code>personFeed().fullName().list(3); // [\"JOHN DOE\", \"ALICE SMITH\", \"BOB BROWN\"]\n</code></pre> <p>Post-processors can also be used for fuzzing the data using the <code>Random</code> instance provided as the second argument.</p>"},{"location":"user-guide/#nullablespec","title":"<code>@NullableSpec</code>","text":"<p>The <code>@NullableSpec</code> annotation is used to indicate that specific feed specs can return null values. This annotation can be combined with any of the other annotations mentioned earlier. When a feed spec is marked as nullable, its corresponding method may randomly produce null values. For example:</p> <pre><code>@NullableSpec\nFeedSpec&lt;Gender&gt; gender();\n</code></pre> <p>Invoking the <code>gender()</code> method may yield results like:</p> <pre><code>personFeed().gender().get(); // MALE\npersonFeed().gender().get(); // null\n// snip...\n</code></pre> <p>This allows for variability in data generation scenarios where <code>null</code> values are valid or desired outputs.</p>"},{"location":"user-guide/#feed-configuration","title":"Feed Configuration","text":"<p>This section outlines configuration options available for feeds. Configuration can be specified through (in order of precedence, from highest to lowest):</p> <ul> <li>Builder API during feed creation.</li> <li>Annotations within a custom feed interface.</li> <li>Settings via the <code>Settings</code> class or <code>instancio.properties</code>.</li> </ul>"},{"location":"user-guide/#feed-data-source","title":"Feed Data Source","text":"<p>All feeds require a data source to be specified. For custom feeds that extend the <code>Feed</code> interface, this can be achieved using the <code>@Feed.Source</code> annotation. Alternatively, the data source can be specified (or overridden) using the builder API. This table summarises the options:</p> <code>@Feed.Source</code> attribute Builder API Description <code>string</code> <code>ofString()</code> Provides data as a <code>String</code> <code>file</code> <code>ofFile()</code> Specifies the path to a file <code>resource</code> <code>ofResource()</code> Refers to a classpath resource <code>-</code> <code>ofInputStream()</code> Provides data as an <code>InputStream</code> <code>-</code> <code>of(Class)</code> Uses a custom Feed class with <code>@Feed.Source</code> <p>It's important to note that the builder API can override the data source specified by <code>@Feed.Source</code>. For example, consider the <code>PersonFeed</code> interface defined with a default resource:</p> <pre><code>@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {\n    // feed spec methods...\n}\n</code></pre> <p>To reuse <code>PersonFeed</code> with an alternative data source:</p> <pre><code>PersonFeed personFeed = Instancio.ofFeed(PersonFeed.class)\n    .withDataSource(source -&gt; source.ofResource(\"another-persons.csv\"))\n    .create();\n\nList&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .applyFeed(all(Person.class), personFeed)\n    .create();\n</code></pre> <p>2 Specify an alternative resource. 6 <code>Person</code> data will be populated using <code>another-persons.csv</code>.</p> <p>The <code>applyFeed()</code> method also supports specifying the data source directly, without creating a custom <code>Feed</code> class:</p> <pre><code>Path feedPath = Paths.get(\"/path/to/persons.csv\");\n\nPerson person = Instancio.of(Person.class)\n    .applyFeed(all(Person.class), feed -&gt; feed.ofFile(feedPath))\n    .create();\n</code></pre>"},{"location":"user-guide/#feed-data-access","title":"Feed Data Access","text":"<p>All the examples above produced feed data in the same order as they are defined in the <code>persons.csv</code> data file. This behaviour is controlled by the <code>Keys.FEED_DATA_ACCESS</code> setting which offers two options:</p> <ul> <li><code>FeedDataAccess.RANDOM</code> - data is provided in random order.</li> <li><code>FeedDataAccess.SEQUENTIAL</code> - data is provided in the order it appears in the feed (default behaviour).</li> </ul> <p>The default setting can be configured via <code>Settings</code> or globally in <code>instancio.properties</code>.</p> <p>When <code>SEQUENTIAL</code> mode is selected, consider setting <code>Keys.FEED_DATA_END_ACTION</code> to define how the end of the data feed should be handled.</p> <p>When extending the <code>Feed</code> interface, the behaviour can be specified using the <code>@Feed.DataAccess</code> annotation, which takes precedence over settings:</p> <pre><code>@Feed.DataAccess(FeedDataAccess.RANDOM)\n@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {}\n</code></pre> <p>Additionally, the behaviour can be overridden using the builder API when creating a feed instance. This method allows overriding the value set via settings or annotations:</p> <pre><code>PersonFeed personFeed = Instancio.ofFeed(PersonFeed.class)\n    .dataAccess(FeedDataAccess.RANDOM)\n    .create();\n</code></pre> <p>Similarly, when using <code>applyFeed()</code>, the same method is available for specifying data access behaviour:</p> <pre><code>Person person = Instancio.of(Person.class)\n        .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class)\n                .dataAccess(FeedDataAccess.RANDOM))\n    .create();\n</code></pre>"},{"location":"user-guide/#feed-data-end","title":"Feed Data End","text":"<p>This setting determines the behaviour when the end of the feed is reached while generating data. It applies only if <code>Keys.FEED_DATA_ACCESS</code> is set to <code>FeedDataAccess.SEQUENTIAL</code>. There are two supported values:</p> <ul> <li><code>FeedDataEndAction.FAIL</code> - throws an exception when the end of the feed is reached.</li> <li><code>FeedDataEndAction.RECYCLE</code> - recycles the data, starting from the beginning of the feed. </li> </ul> <p>You can also specify this behaviour using the builder API:</p> <pre><code>PersonFeed personFeed = Instancio.ofFeed(PersonFeed.class)\n    .onDataEnd(FeedDataEndAction.RECYCLE)\n    .create();\n</code></pre> <p>Similarly, when using the <code>applyFeed()</code> method, you can specify the data end action:</p> <pre><code>Person person = Instancio.of(Person.class)\n        .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class)\n                .onDataEnd(FeedDataEndAction.RECYCLE))\n    .create();\n</code></pre>"},{"location":"user-guide/#feed-data-format","title":"Feed Data Format","text":"<p>Instancio supports data feeds in both CSV and JSON formats. Using JSON feeds requires <code>jackson-databind</code> to be included in your project's dependencies (Instancio does not provide this dependency transitively):</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n    &lt;version&gt;${jackson-databind-version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>By default, Instancio uses <code>CSV</code> as the data format. However, you can modify this behavior using the <code>Keys.FEED_FORMAT_TYPE</code> setting.</p> <p>To specify the data format for a custom feed interface, you can use the <code>@Feed.FormatType</code> annotation:</p> <pre><code>@Feed.FormatType(FeedFormatType.JSON)\n@Feed.Source(resource = \"persons.json\")\ninterface PersonFeed extends Feed {}\n</code></pre> <p>Alternatively, the format can be set using the builder API:</p> <pre><code>PersonFeed personFeed = Instancio.ofFeed(PersonFeed.class)\n    .formatType(FeedFormatType.JSON)\n    .create();\n</code></pre> <p>or using the <code>applyFeed()</code> method:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class)\n                .formatType(FeedFormatType.JSON))\n    .create();\n</code></pre>"},{"location":"user-guide/#format-options","title":"Format Options","text":"<p>The CSV format allows for configuring various options to customise how data is interpreted:</p> <ul> <li>Delimiter Character: Specifies the character used to separate fields in the CSV data.</li> <li>Comment Prefix: Defines the prefix used to identify comment lines within the CSV data.</li> <li>Whitespace Trimming: Controls whether leading and trailing whitespace around fields should be trimmed.</li> </ul> <p>These options enable defining data in a customised CSV format, as shown in the example below:</p> <pre><code>String data = \"\"\"\n    | firstName  | lastName  | dateOfBirth  | gender |\n    |------------|-----------|--------------|--------|\n    | John       | Doe       | 2001-11-22   | MALE   |\n    | Alice      | Smith     | 1977-07-15   | FEMALE |\n    | Bob        | Brown     | 1999-12-01   | MALE   |\n    |- snip...\n    \"\"\";\n\nFeed personFeed = Instancio.ofFeed(Feed.class)\n    .withDataSource(source -&gt; source.ofString(data))\n    .formatOptions(format -&gt; format.csv()\n            .commentPrefix(\"|-\")\n            .delimiter('|'))\n    .create();\n</code></pre> <p>The <code>formatOptions()</code> method is also available when using the <code>applyFeed()</code> builder API.</p>"},{"location":"user-guide/#feed-tags","title":"Feed Tags","text":"<p>Feeds in Instancio support tagging, which allows grouping data by a specific tag key and filtering it by tag values.</p> <p>For feeds that extend the <code>Feed</code> interface, you can specify the tag key using the <code>@Feed.TagKey</code> annotation:</p> <pre><code>@Feed.TagKey(\"gender\")\n@Feed.Source(resource = \"persons.csv\")\ninterface PersonFeed extends Feed {}\n</code></pre> <p>With the tag key defined, you can generate a list of <code>Person</code> objects, filtering for those where the <code>gender</code> tag value is <code>FEMALE</code>, for example:</p> <pre><code>List&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class)\n            .withTagValue(\"FEMALE\"))\n    .create();\n\n// Output:\n// [Person[id=9485, firstName=\"Alice\", lastName=\"Smith\", dateOfBirth=1977-07-15, gender=FEMALE],\n//  ...snip...]\n</code></pre> <p>You can also specify the tag key using the builder API, which overrides the <code>@Feed.TagKey</code> annotation (if present):</p> <pre><code>List&lt;Person&gt; persons = Instancio.ofList(Person.class)\n    .applyFeed(all(Person.class), feed -&gt; feed.of(PersonFeed.class)\n            .withTagKey(\"gender\")\n            .withTagValue(\"FEMALE\"))\n    .create();\n</code></pre> <p>In addition, Instancio provides settings (<code>Keys.FEED_TAG_KEY</code> and <code>Keys.FEED_TAG_VALUE</code>) to configure default tag key and value settings, which can be overridden as needed. By default, these settings are <code>null</code>.</p> <p>If the feed includes an 'id' column, tagging allows selecting specific records based on their 'id'.</p>"},{"location":"user-guide/#configuration","title":"Configuration","text":"<p>Instancio configuration is encapsulated by the Settings class, a map of keys and corresponding values. The <code>Settings</code> class provides a few static methods for creating settings.</p> Settings static factory methods<pre><code>Settings.create()\nSettings.defaults()\nSettings.from(Map&lt;Object, Object&gt; map)\nSettings.from(Settings other)\n</code></pre> <p>1 Creates a new instance of blank settings. 2 Creates a new instance containing default settings. 3 Creates settings from a <code>Map</code> or <code>java.util.Properties</code>. 4 Creates a copy of <code>other</code> settings (a clone operation).</p> <p>Settings can be overridden programmatically or through a properties file.</p> <p>Info</p> <p>To inspect all the keys and default values, simply: <code>System.out.println(Settings.defaults())</code></p>"},{"location":"user-guide/#overriding-settings-programmatically","title":"Overriding Settings Programmatically","text":"<p>To override programmatically, an instance of <code>Settings</code> can be passed in to the builder API:</p> Supplying custom settings<pre><code>Settings overrides = Settings.create()\n    .set(Keys.COLLECTION_MIN_SIZE, 10)\n    .set(Keys.STRING_ALLOW_EMPTY, true)\n    .set(Keys.SEED, 12345L) // seed is of type long (note the 'L')\n    .lock();\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(overrides)\n    .create();\n</code></pre> <p>2 The Keys class provides static fields for all the keys supported by Instancio. 5 The <code>lock()</code> method makes the settings instance immutable. This is an optional method call. It can be used to prevent modifications if settings are shared across multiple methods or classes. 8 The passed-in settings instance will override default settings.</p> <p>Range settings auto-adjust</p> <p>When updating range settings, such as <code>COLLECTION_MIN_SIZE</code> and <code>COLLECTION_MAX_SIZE</code>, the range bound is auto-adjusted if the new minimum is higher than the current maximum, and vice versa.</p> <p>The Keys class defines a property key for every key object, for example:</p> <ul> <li><code>Keys.COLLECTION_MIN_SIZE</code> -&gt; <code>\"collection.min.size\"</code></li> <li><code>Keys.STRING_ALLOW_EMPTY</code>  -&gt; <code>\"string.allow.empty\"</code></li> </ul> <p>Using these property keys, configuration values can also be overridden using a properties file.</p>"},{"location":"user-guide/#overriding-settings-using-a-properties-file","title":"Overriding Settings Using a Properties File","text":"<p>Default settings can be overridden using <code>instancio.properties</code>. Instancio will automatically load this file from the root of the classpath. The following listing shows all the property keys that can be configured.</p> Sample configuration properties<pre><code>array.elements.nullable=false\narray.max.length=6\narray.min.length=2\narray.nullable=false\nbigdecimal.scale=2\nboolean.nullable=false\nbyte.max=127\nbyte.min=1\nbyte.nullable=false\ncharacter.nullable=false\ncollection.elements.nullable=false\ncollection.max.size=6\ncollection.min.size=2\ncollection.nullable=false\ndouble.max=10000\ndouble.min=1\ndouble.nullable=false\nfail.on.error=false\nfill.type=POPULATE_NULLS_AND_DEFAULT_PRIMITIVES\nfloat.max=10000\nfloat.min=1\nfloat.nullable=false\nignore.field.name.regexes=foo.*,bar.*\ninstancio.source.samples=100\ninteger.max=10000\ninteger.min=1\ninteger.nullable=false\njpa.enabled=false\nlong.max=10000\nlong.min=1\nlong.nullable=false\nmap.keys.nullable=false\nmap.values.nullable=false\nmap.max.size=6\nmap.min.size=2\nmap.nullable=false\nmax.depth=8\nmax.generation.attempts=1000\nmode=STRICT\nhint.after.generate=POPULATE_NULLS_AND_DEFAULT_PRIMITIVES\noverwrite.existing.values=true\nassignment.type=FIELD\non.feed.property.unmatched=FAIL\non.set.field.error=IGNORE\non.set.method.error=ASSIGN_FIELD\non.set.method.not.found=ASSIGN_FIELD\non.set.method.unmatched=IGNORE\nsetter.style=SET\nseed=12345\nset.back.references=false\nshort.max=10000\nshort.min=1\nshort.nullable=false\nstring.allow.empty=false\nstring.field.prefix.enabled=false\nstring.max.length=10\nstring.min.length=3\nstring.nullable=false\nstring.case=UPPER\nstring.type=ALPHABETIC\nsubtype.java.util.Collection=java.util.ArrayList\nsubtype.java.util.List=java.util.ArrayList\nsubtype.java.util.Map=java.util.HashMap\nsubtype.java.util.SortedMap=java.util.TreeMap\n</code></pre> <p>1,11,31-32 The <code>*.elements.nullable</code>, <code>map.keys.nullable</code>, <code>map.values.nullable</code> specify whether Instancio can generate <code>null</code> values for array/collection elements and map keys and values. 4 The other <code>*.nullable</code> properties specifies whether Instancio can generate <code>null</code> values for a given type. 38 Specifies the mode, either <code>STRICT</code> (default) or <code>LENIENT</code>. See Selector Strictness. 49 Specifies a global seed value. 61 Properties prefixed with <code>subtype</code> are used to specify default implementations for abstract types, or map types to subtypes in general. This is the same mechanism as subtype mapping, but configured via properties.</p>"},{"location":"user-guide/#settings-precedence","title":"Settings Precedence","text":"<p>Instancio layers settings on top of each other, each layer overriding the previous ones. This is done in the following order:</p> <ol> <li><code>Settings.defaults()</code></li> <li>Settings from <code>instancio.properties</code></li> <li>Settings injected using <code>@WithSettings</code> annotation when using <code>InstancioExtension</code> (see Settings Injection)</li> <li>Settings supplied using the builder API's withSettings(Settings) method</li> </ol> <p>In the absence of any other configuration, Instancio uses defaults as returned by <code>Settings.defaults()</code>. If <code>instancio.properties</code> is found at the root of the classpath, it will override the defaults. Finally, settings can also be overridden at runtime using <code>@WithSettings</code> annotation or withSettings(Settings) method. The latter takes precedence over everything else.</p>"},{"location":"user-guide/#instancio-service-provider-interface","title":"Instancio Service Provider Interface","text":"<p>The InstancioServiceProvider interface allows customising how objects are created and populated. It defines the following methods, which return <code>null</code> by default and can be overridden as needed:</p> <ul> <li><code>GeneratorProvider getGeneratorProvider()</code></li> <li><code>AnnotationProcessor getAnnotationProcessor()</code></li> <li><code>SetterMethodResolver getSetterMethodResolver()</code></li> <li><code>TypeResolver getTypeResolver()</code></li> <li><code>TypeInstantiator getTypeInstantiator()</code></li> </ul> <p>An implementation of <code>InstancioServiceProvider</code> can be registered by creating a file named <code>org.instancio.spi.InstancioServiceProvider</code> under <code>/META-INF/services/</code>. The file should contain the fully-qualified name of the implementation class, for example:</p> /META-INF/services/org.instancio.spi.InstancioServiceProvider<pre><code>org.example.InstancioServiceProviderImpl\n</code></pre>"},{"location":"user-guide/#generatorprovider","title":"<code>GeneratorProvider</code>","text":"<p>This interface allows mapping a <code>Node</code> to a <code>GeneratorSpec</code>:</p> <pre><code>interface GeneratorProvider {\n    GeneratorSpec&lt;?&gt; getGenerator(Node node, Generators gen);\n}\n</code></pre> <p>The <code>Generators</code> parameter provides access to built-in generators. This is the same class that is provided to the <code>generate()</code> method.</p> <p>The <code>Node</code> object represents a class and/or field in the node hierarchy, for example:</p> <ul> <li><code>Person.dateOfBirth</code> node will have the target class <code>LocalDate</code> and the <code>java.lang.reflect.Field</code> <code>dateOfBirth</code></li> <li>the collection element node of <code>List&lt;Phone&gt;</code> will have the target class <code>Phone</code> and a <code>null</code> field</li> </ul>"},{"location":"user-guide/#use-case","title":"Use Case","text":"<p>The main use case for implementing the <code>GeneratorProvider</code> is to have generators resolved automatically. For example, the following implementation generates maximum string length based on the <code>length</code> attribute of the JPA <code>@Column</code> annotation.</p> <p>More on JPA</p> <p>From version <code>3.3.0</code> Instancio supports this functionality out-of-the-box. See the JPA section for more details.</p> <pre><code>import javax.persistence.Column;\n\npublic class GeneratorProviderImpl implements GeneratorProvider {\n\n    @Override\n    public GeneratorSpec&lt;?&gt; getGenerator(final Node node, final Generators gen) {\n        Field field = node.getField();\n        Class&lt;?&gt; targetClass = node.getTargetClass();\n\n        if (targetClass == String.class &amp;&amp; field != null) {\n            Column column = field.getDeclaredAnnotation(Column.class);\n            if (column != null) {\n                return gen.string().maxLength(column.length());\n            }\n        }\n        return null;\n    }\n}\n</code></pre> <p>13 Set maximum string length based on the <code>length</code> attribute. 16 Returning <code>null</code> means a value will be generated using built-in generators.</p> <p>Assuming the following entity:</p> <pre><code>class Phone {\n    @Column(length = 3)\n    String countryCode;\n\n    @Column(length = 15)\n    String number;\n}\n</code></pre> <p>Calling <code>Instancio.create()</code> should produce string lengths that conform to the schema:</p> <pre><code>Phone phone = Instancio.create(Phone.class);\nassertThat(phone.getCountryCode()).hasSizeLessThanOrEqualTo(3);\nassertThat(phone.getNumber()).hasSizeLessThanOrEqualTo(15);\n</code></pre> <p>Using the API methods <code>set()</code>, <code>supply()</code>, or <code>generate()</code> it is still possible to override values using the API if needed:</p> <pre><code>Phone phone = Instancio.of(Phone.class)\n    .generate(field(Phone::getNumber), gen -&gt; gen.string().length(20))\n    .create();\n</code></pre>"},{"location":"user-guide/#annotationprocessor","title":"<code>AnnotationProcessor</code>","text":"<p>Experimental API <code>@since 4.5.0</code></p> <p>This interface allows processing custom annotations:</p> <pre><code>interface AnnotationProcessor {\n    // no methods to implement\n}\n</code></pre> <p>It has no methods to implement. Instead, it relies on user-defined methods marked with the <code>@AnnotationHandler</code> annotation. The accepted signatures for <code>@AnnotationHandler</code> methods are:</p> <pre><code>@AnnotationHandler\nvoid example(Annotation annotation, GeneratorSpec&lt;?&gt; spec, Node node)\n\n@AnnotationHandler\nvoid example(Annotation annotation, GeneratorSpec&lt;?&gt; spec)\n</code></pre> <p>The <code>annotation</code> and <code>spec</code> parameters can be subtypes <code>java.lang.annotation.Annotation</code> and <code>org.instancio.generator.GeneratorSpec</code>, respectively. The <code>node</code> parameter is optional, and can be omitted if it's not needed.</p>"},{"location":"user-guide/#use-case_1","title":"Use Case","text":"<p>The main use case for implementing the <code>AnnotationProcessor</code> is to customise generated values based on custom annotations. Let's assume we have the following annotations and a POJO:</p> <pre><code>@Target({ElementType.FIELD, ElementType.TYPE_USE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Hex {\n    int length();\n}\n\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MapWithKeys {\n    String[] value();\n}\n\nclass Pojo {\n    @MapWithKeys({\"foo\", \"bar\"})\n    private Map&lt;String, @Hex(length = 10) String&gt; map;\n}\n</code></pre> <p>13 The <code>@MapWithKeys</code> annotation specifies that a given <code>Map</code> must contain given keys. 14 the <code>@Hex</code> annotation denotes that a string must be a hexadecimal value of the specified <code>length()</code>.</p> <p>Our <code>Pojo</code> declares a <code>Map</code> that should contain hexadecimal strings as values. The keys can be arbitrary strings, but the map should contain <code>foo</code> and <code>bar</code>. To achieve this, we can implement an <code>AnnotationProcessor</code> as shown below.</p> <pre><code>public class AnnotationProcessorImpl implements AnnotationProcessor {\n\n    @AnnotationHandler\n    void withKeys(MapWithKeys annotation, MapGeneratorSpec&lt;String, ?&gt; mapSpec) {\n        mapSpec.withKeys(annotation.values());\n    }\n\n    @AnnotationHandler\n    void hexString(Hex annotation, StringGeneratorSpec stringSpec) {\n        stringSpec.hex().length(annotation.length());\n    }\n}\n</code></pre> <p>3,8 methods must be annotated with <code>@AnnotationHandler</code>. 4,9 the third parameter (<code>Node</code>) is omitted as it's not needed in this example.</p> <p>Instancio will use methods marked with <code>@AnnotationHandler</code> to process the annotations. The first argument must be the annotation, and the second is the <code>GeneratorSpec</code> applicable to the annotated type (to find the specific spec interface, see the <code>org.instancio.generator.specs</code> package Javadoc or the <code>org.instancio.generators.Generators</code> class).</p> <p>Once the above is in place, the following snippet:</p> <pre><code>Pojo pojo = Instancio.create(Pojo.class);\n</code></pre> <p>should produce output similar to:</p> <pre><code>Pojo[map={bar=2F5E92847B, NGJKQBQ=25F845DB67, foo=824D732CAA, ODDVXUPESM=2EDB5EB46A}]\n</code></pre> <p>It should be noted that the <code>AnnotationProcessor</code> can only be used to customise existing generators. To define a custom <code>Generator</code> for a given annotation, use a custom <code>GeneratorProvider</code>.</p>"},{"location":"user-guide/#settermethodresolver","title":"<code>SetterMethodResolver</code>","text":"<p>This interface is for providing custom resolution of setter methods from fields when <code>Keys.ASSIGNMENT_TYPE</code> is set to <code>AssignmentType.METHOD</code>:</p> <pre><code>interface SetterMethodResolver {\n    Method getSetter(Node node);\n}\n</code></pre>"},{"location":"user-guide/#use-case_2","title":"Use Case","text":"<p>Out of the box, Instancio can resolve setter methods from fields assuming method names follow standard naming conventions (see Assignment Settings for details). A custom <code>SetterMethodResolver</code> implementation allows tests to use <code>AssignmentType.METHOD</code> with applications that follow non-standard naming conventions.</p> <p>Consider the following example, where the POJO has a field prefixed with an underscore. The goal is to populate the POJO via the setter method as it contains some logic:</p> <pre><code>class Pojo {\n    private String _value;\n\n    public String getValue() {\n        return _value;\n    }\n\n    public void setValue(String value) {\n        this._value = value.length() + \":\" + value;\n    }\n}\n</code></pre> <p>However, the field name <code>_value</code> does not map to method name <code>setValue()</code>. Therefore, the setter will not be resolved, and the value will be populated via field assignment as a fallback. A custom <code>SetterMethodResolver</code> can be implemented to handle this case as shown below.</p> Resolves setter method names for fields prefixed with an underscore<pre><code>public class SetterMethodResolverImpl implements SetterMethodResolver {\n\n    @Override\n    public Method getSetter(Node node) {\n        Field field = node.getField();\n\n        // discard the '_' prefix\n        char[] ch = field.getName().substring(1).toCharArray();\n        ch[0] = Character.toUpperCase(ch[0]);\n\n        String methodName = \"set\" + new String(ch);\n\n        return Arrays.stream(field.getDeclaringClass().getDeclaredMethods())\n                .filter(m -&gt; m.getName().equals(methodName))\n                .findFirst()\n                .orElse(null);\n    }\n}\n</code></pre> <p>14 For brevity, matching is done by name only, ignoring parameter types. 16 Returning <code>null</code> means built-in method resolvers will be used as a fallback.</p> <p>With the above in place, the <code>Pojo</code> can be created as follows:</p> <pre><code>Settings settings = Settings.create()\n    .set(Keys.ASSIGNMENT_TYPE, AssignmentType.METHOD);\n\nPojo pojo = Instancio.of(Pojo.class)\n    .withSettings(settings)\n    .create();\n\n// Sample output: Pojo[_value=\"5:EVHKT\"]\n</code></pre>"},{"location":"user-guide/#typeresolver","title":"<code>TypeResolver</code>","text":"<p>This interface allows mapping a type to a subtype:</p> <pre><code>interface TypeResolver {\n    Class&lt;?&gt; getSubtype(Class&lt;?&gt; type);\n}\n</code></pre> <p>The subtype mapping uses the same mechanism as the <code>subtype()</code> API method.</p>"},{"location":"user-guide/#use-case_3","title":"Use Case","text":"<p>The primary use case for implementing the <code>TypeResolver</code> is to resolve subtypes automatically. By default, Instancio does not resolve the implementation class if given an abstract type. Instead, the implementation class must be specified manually. This can be done either via the <code>subtype()</code> method:</p> <pre><code>Animal animal = Instancio.of(Animal.class)\n    .subtype(all(Animal.class), Cat.class)\n    .create();\n</code></pre> <p>or via <code>Settings</code>:</p> <pre><code>Settings settings = Settings.create()\n    .mapType(Animal.class, Cat.class);\n\nAnimal animal = Instancio.of(Animal.class)\n    .withSettings(settings)\n    .create();\n</code></pre> <p>Using <code>TypeResolver</code>, the subtype can be resolved automatically:</p> <pre><code>public class TypeResolverImpl implements TypeResolver {\n\n    @Override\n    public Class&lt;?&gt; getSubtype(final Class&lt;?&gt; type) {\n        if (type == Animal.class) {\n            return Cat.class;\n        }\n        return null;\n    }\n}\n</code></pre> <p>Then calling <code>Instancio.create()</code> should use the specified subtype:</p> <pre><code>Animal animal = Instancio.create(Animal.class);\nassertThat(animal).isExactlyInstanceOf(Cat.class);\n</code></pre> <p>Scanning the Classpath</p> <p>Using <code>TypeResolver</code> it is also possible to resolve implementation classes via classpath scanning, for example, using a third-party library. For a sample implementation, see <code>type-resolver-sample</code>.</p>"},{"location":"user-guide/#typeinstantiator","title":"<code>TypeInstantiator</code>","text":"<p>This interface is for providing custom instantiation logic for classes that Instancio is unable to instantiate out-of-the-box:</p> <pre><code>interface TypeInstantiator {\n    Object instantiate(Class&lt;?&gt; type);\n}\n</code></pre> <p>By default, Instancio attempts to instantiate a class using the default constructor. If the default constructor is unavailable or fails (for example, the constructor throws an exception), Instancio will attempt to use a constructor with the least number of parameters and pass in default values. If the last option also fails, then it resorts to JDK-specific approaches, such as using <code>sun.misc.Unsafe</code>. There may be situations where all the listed options fail, which would result in <code>null</code> values being generated. Using <code>TypeInstantiator</code> allows plugging in custom instantiation logic.</p>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#debugging","title":"Debugging","text":"<p>Instancio uses SLF4J for logging. Most of the messages are logged at <code>DEBUG</code> or <code>TRACE</code> level. Logging information can be useful when Instancio produces an error or does not generate expected values.</p> <p>In addition to logging, the builder API provides the <code>verbose()</code> method that outputs current settings as well as the internal model containing the node hierarchy to standard output. For example:</p> <pre><code>List&lt;Phone&gt; result = Instancio.ofList(Phone.class)\n    .verbose()\n    .create();\n</code></pre> <p>will produce (ignoring settings output for brevity):</p> <pre><code>// snip...\n\n### Node hierarchy\n\nFormat: &lt;depth:class: field&gt;\n\n&lt;0:List&gt;\n \u2514\u2500\u2500&lt;1:Phone&gt;\n     \u251c\u2500\u2500&lt;2:Phone: String countryCode&gt;\n     \u2514\u2500\u2500&lt;2:Phone: String number&gt;\n\n -&gt; Node max depth ........: 2\n -&gt; Model max depth .......: 8\n -&gt; Total nodes ...........: 4\n -&gt; Seed ..................: 2699444350509138652\n</code></pre> <p>12 maximum depth of the object. 13 configured maximum depth up to which values will be generated. 14 total number of nodes the root type contains. 15 seed that was used to populate the data.</p> <p>The <code>verbose()</code> method can be particularly useful when working with deep, complex class hierarchies that contain many fields, collections, and cyclic relationships. For example, some APIs such as <code>assign()</code> and <code>emit()</code> require that a given selector matches exactly one target. The node hierarchy can be used to troubleshoot cases where the selector happens to match more than one target. The visual representation makes it easier to fine-tune the selector by specifying selector scope or depth.</p>"},{"location":"user-guide/#error-handling","title":"Error Handling","text":"<p>The default behaviour of Instancio is to fully populate an object, up to a certain depth. In case of internal errors, Instancio will still attempt to return an object, though some fields or collections may not be fully populated.</p> <p>Consider the following somewhat contrived example:</p> An impossible Set<pre><code>Set&lt;Boolean&gt; set = Instancio.ofSet(Boolean.class)\n    .size(10)\n    .create();\n</code></pre> <p>Since  it is not possible to create a <code>Set</code> of 10 booleans, Instancio will generate a set of size 2, containing values <code>true</code> and <code>false</code>. However, internally, this use case will produce an exception that is suppressed by default. At <code>DEBUG</code> log level, Instancio will report the following:</p> <pre><code>Suppressed error because Keys.FAIL_ON_ERROR (fail.on.error) is disabled.\n-&gt; To propagate the error, set Keys.FAIL_ON_ERROR setting to true.\n-&gt; To display the stack trace, run in verbose() mode or with TRACE logging.\n\norg.instancio.exception.InstancioException: Internal error occurred creating an object.\n\nInternal errors are suppressed by default and\ncan be ignored if not applicable to the current test\n -&gt; at com.example.ExampleTest(ExampleTest.java:123)\n\nReason: unable to populate Collection of size 10: class Set&lt;Boolean&gt; (depth=0)\n</code></pre> <p>As the message suggests, the <code>Keys.FAIL_ON_ERROR</code> setting can be enabled to propagate internal errors. This can be done via the <code>Settings</code> API or configuration file:</p> instancio.properties<pre><code>fail.on.error=true\n</code></pre>"},{"location":"user-guide/#seed","title":"Seed","text":"<p>Before creating an object, Instancio initialises a random seed value. This seed value is used internally by the pseudorandom number generator, that is, <code>java.util.Random</code>. Instancio ensures that the same instance of the random number generator is used throughout object creation, from start to finish. This means that Instancio can reproduce the same object again by using the same seed. This feature allows reproducing failed tests (see the section on reproducing tests with JUnit).</p> <p>In addition, Instancio handles classes like <code>UUID</code> and <code>LocalDateTime</code>, where a minor difference in values can cause an object equality check to fail. These classes are generated in such a way, that for a given seed value, the generated values will be the same. To illustrate with an example, we will use the following <code>SamplePojo</code> class.</p> Sample POJO<pre><code>class SamplePojo {\n    private UUID uuid;\n    private LocalDateTime localDateTime;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof SamplePojo)) return false;\n        SamplePojo p = (SamplePojo) o;\n        return uuid.equals(p.uuid) &amp;&amp; localDateTime.equals(p.localDateTime);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(uuid, localDateTime);\n    }\n}\n</code></pre> <p>By supplying the same seed value, the same object is generated:</p> Generating two SamplePojo instances with the same seed<pre><code>final long seed = 123;\n\nSamplePojo pojo1 = Instancio.of(SamplePojo.class)\n    .withSeed(seed)\n    .create();\n\nSamplePojo pojo2 = Instancio.of(SamplePojo.class)\n    .withSeed(seed)\n    .create();\n\nassertThat(pojo1).isEqualTo(pojo2);\n</code></pre> <p>If the objects are printed, both produce the same output:</p> <pre><code>SamplePojo(\n  uuid=3bf992ad-1121-36a2-826d-94112bf1d82b,\n  localDateTime=2069-10-15T10:28:31.940\n)\n</code></pre> <p>While the generated values are the same, it is not recommended to write assertions using hard-coded values.</p>"},{"location":"user-guide/#specifying-seed-value","title":"Specifying Seed Value","text":"<p>By default, if no custom seed is specified, Instancio generates a random seed value. Therefore, each execution results in different outputs. This behaviour can be overridden by specifying a custom seed using any of the options below. These are ranked from highest to lowest precedence:</p> <ol> <li>withSeed(long)  method of the builder API</li> <li>withSettings(Settings) or withSetting(SettingKey&lt;T&gt;, T) method of the builder API using <code>Keys.SEED</code></li> <li><code>@WithSettings</code> annotations (requires <code>InstancioExtension</code>)</li> <li><code>@Seed</code> annotation  (requires <code>InstancioExtension</code>)</li> <li><code>instancio.properties</code> file (see Global Seed for details)</li> <li>random seed</li> </ol> <p>Precedence rules are summarised in the following table, where each number represents a seed value, and <code>R</code> represents a random seed.</p> Randomseed <code>.properties</code> <code>@Seed</code> <code>@WithSettings</code> <code>.withSettings()</code> <code>.withSeed()</code> Actualseed R 5 4 3 2 1 1 R 5 4 3 2 - 2 R 5 4 3 - - 3 R 5 4 - - - 4 R 5 - - - - 5 R - - - - - R"},{"location":"user-guide/#withsettings-seed","title":"<code>@WithSettings</code> seed","text":"<p>When a seed is specified via <code>@WithSettings</code>, all objects generated within the test class are created using the given seed. For this reason, if two objects of the same type are created, both instances will be identical, for example:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n            .set(Keys.SEED, 12345L);\n\n    @Test\n    void example() {\n        Pojo pojo1 = Instancio.create(Pojo.class);\n        Pojo pojo2 = Instancio.create(Pojo.class);\n\n        assertThat(pojo1).isEqualTo(pojo2);\n    }\n}\n</code></pre> <p>This is because the above snippet is equivalent to:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @Test\n    void example() {\n        Settings settings = Settings.create()\n                .set(Keys.SEED, 12345L);\n\n        Pojo pojo1 = Instancio.of(Pojo.class)\n                .withSettings(settings)\n                .create();\n\n        Pojo pojo2 = Instancio.of(Pojo.class)\n                .withSettings(settings)\n                .create();\n\n        assertThat(pojo1).isEqualTo(pojo2);\n    }\n}\n</code></pre>"},{"location":"user-guide/#global-seed","title":"Global Seed","text":"<p>A global seed can be specified in <code>instancio.properties</code> using the <code>seed</code> property key:</p> <pre><code>seed=9283754\n</code></pre> <p>There are some important differences in how the global seed works depending on whether tests declare the <code>InstancioExtension</code>.</p>"},{"location":"user-guide/#global-seed-without-the-instancioextension","title":"Global Seed Without the <code>InstancioExtension</code>","text":"<p>When tests are run without the extension, the same <code>Random</code> instance is used across all test classes and methods. Therefore, generated data is affected by the order in which test methods are run.</p> <p>Let's assume the configured seed in the properties file produces the following output if <code>test1</code> is run first:</p> <pre><code>class ExampleTest {\n    @Test\n    void test1() {\n        String s1 = Instancio.create(String.class); // Output: \"FCGVRXSUU\"\n    }\n\n    @Test\n    void test2() {\n        String s2 = Instancio.create(String.class); // Output: \"OCNVRBX\"\n    }\n}\n</code></pre> <p>If <code>test2</code> were to run first, then <code>s2</code> will be <code>FCGVRXSUU</code> and <code>s1</code> will be <code>OCNVRBX</code>.</p> <p>In short, when using the global seed without the <code>InstancioExtension</code>, the generated data is static for:</p> <ul> <li>a given test method, or</li> <li>a set of test methods that are run in a particular order</li> </ul> <p>For this reason, using a global seed without the extension is not recommended, as it makes it harder to reproduce the data in case of test failure.</p>"},{"location":"user-guide/#global-seed-with-the-instancioextension","title":"Global Seed With the <code>InstancioExtension</code>","text":"<p>When using the extension, each test method gets its own instance of <code>Random</code> initialised with the seed from the properties file. As a result, generated data is not affected by the order in which test methods are run.</p> <p>For example, the following snippet will always produce the same output:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n    @Test\n    void T1() {\n        String t1 = Instancio.create(String.class); // Output: \"FCGVRXSUU\"\n    }\n\n    @Test\n    void T2() {\n        String t2 = Instancio.create(String.class); // Output: \"FCGVRXSUU\"\n    }\n}\n</code></pre>"},{"location":"user-guide/#getting-the-seed-value","title":"Getting the Seed Value","text":"<p>Sometimes it is necessary to get the seed value that was used to generate the data. One such example is for reproducing failed tests. If you are using JUnit 5, the seed value is reported automatically using the <code>InstancioExtension</code> (see JUnit Jupiter integration). If you are using JUnit 4, TestNG, or Instancio standalone, the seed value can be obtained by calling the <code>asResult()</code> method of the builder API. This returns a <code>Result</code> containing the created object and the seed value that was used to populate its values.</p> Example of using asResult()<pre><code>Result&lt;Person&gt; result = Instancio.of(Person.class).asResult();\nPerson person = result.get();\nlong seed = result.getSeed(); // seed value that was used for populating the person\n// snip...\n</code></pre> <p>In addition, seed values can be logged by setting the following class to <code>TRACE</code>:</p> <pre><code>org.instancio.support.Seeds\n</code></pre> <p>This will create a log message for every generated root object created via the API:</p> <pre><code>Generating org.example.Pojo with seed 1473150975436346185 (seed source: RANDOM)\n</code></pre>"},{"location":"user-guide/#junit-jupiter-integration","title":"JUnit Jupiter Integration","text":"<p>Instancio supports JUnit 5 through the InstancioExtension, which provides several useful features:</p> <ul> <li>Injection of fields and method parameters using the <code>@Given</code> annotation</li> <li>Ability to use <code>@InstancioSource</code> with <code>@ParameterizedTest</code> methods</li> <li>Injection of custom settings using the <code>@WithSettings</code> annotation</li> <li>Support for reproducing failed tests using the <code>@Seed</code> annotation</li> </ul>"},{"location":"user-guide/#given-injection","title":"<code>@Given</code> Injection","text":"<p>Experimental API <code>@since 5.0.0</code></p> <p>The @Given annotation can be used to inject generated values into fields and method parameters:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @Given\n    private Person person;\n\n    @Test\n    void example() {\n        System.out.println(person);\n        // Sample output:\n        // Person[firstName=BVERADS, lastName=UYBQNZ]\n    }\n}\n</code></pre> <p>Under the hood, the extension will execute <code>Instancio.create(Person.class)</code> and inject the result into the annotated field.</p> <p>The <code>@Given</code> annotation can also be used to add parameters to <code>@Test</code> methods:</p> <pre><code>@Test\nvoid example(@Given String string, @Given List&lt;Integer&gt; numbers) {\n    // ...\n}\n</code></pre> <p>Additionally, the <code>@Given</code> annotation can supplement <code>@ParameterizedTest</code> methods with additional arguments. In the following example, the <code>value</code> parameter is provided by the <code>@ValueSource</code>, while the <code>number</code> is provided by Instancio:</p> <pre><code>@ValueSource(strings = {\"foo\", \"bar\"})\n@ParameterizedTest\nvoid example(String value, @Given Integer number) {\n    // Sample output:\n    // [1] value=foo, number=167\n    // [2] value=bar, number=9873\n}\n</code></pre> <p>Moreover, the <code>@Given</code> annotation supports injecting <code>Supplier</code> and <code>Stream</code> objects:</p> <pre><code>@Test\nvoid withSupplier(@Given Supplier&lt;Integer&gt; supplier) {\n    // Sample output:\n    Integer i1 = supplier.get(); // 3463\n    Integer i2 = supplier.get(); // 935\n}\n\n@Test\nvoid withStream(@Given Stream&lt;Integer&gt; stream) {\n    List&lt;Integer&gt; list = stream.limit(3).toList();\n    // Sample output: [250, 7044, 3256]\n}\n</code></pre>"},{"location":"user-guide/#using-custom-givenprovider","title":"Using Custom <code>GivenProvider</code>","text":"<p>The <code>@Given</code> annotation can accept one or more <code>GivenProvider</code> classes to provide customised values. The <code>GivenProvider</code> interface is defined as follows:</p> <pre><code>public interface GivenProvider {\n    Object provide(ElementContext context);\n}\n</code></pre> <p>The <code>ElementContext</code> class provides information about the annotated element (<code>java.lang.reflect.Field</code> or <code>java.lang.reflect.Parameter</code>) as well as an instance of <code>Random</code> for generating reproducible random values.</p> <p>For example, to generate a product code consisting of 3 letters followed by 5 digits (e.g. <code>ABC12345</code>):</p> <pre><code>class ProductCodeProvider implements GivenProvider {\n    @Override\n    public Object provide(ElementContext context) {\n        Random random = context.random();\n        return random.upperCaseAlphabetic(3) + random.digits(5);\n    }\n}\n</code></pre> <p>You can use this class with the <code>@Given</code> annotation to generate product codes:</p> <pre><code>@Test\nvoid example(@Given(ProductCodeProvider.class) String productCode) {\n    // ...\n}\n</code></pre> <p>If a provider is widely used across many tests, consider defining a custom annotation:</p> <pre><code>@Target({ElementType.FIELD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Given(ProductCodeProvider.class)\n@interface GivenProductCode {\n}\n</code></pre> <p>Sample usage:</p> <pre><code>@Test\nvoid example(@GivenProductCode String productCode) {\n    // ...\n}\n</code></pre> <p>Using multiple providers</p> <p>When multiple providers are specified, e.g. <code>@Given({Provider1.class, Provider2.class})</code> Instancio will choose providers randomly from the specified classes.</p>"},{"location":"user-guide/#parameterized-tests-with-instanciosource","title":"Parameterized Tests with <code>@InstancioSource</code>","text":"<p>The @InstancioSource annotation allows you to provide arguments directly to a <code>@ParameterizedTest</code> method. This works for both single and multiple arguments, with each class representing one argument.</p> <p>Using <code>@ParameterizedTest</code> requires the <code>junit-jupiter-params</code> dependency.</p> <p>See JUnit documentation for details.</p> Using @InstancioSource with @ParameterizedTest<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @ParameterizedTest\n    @InstancioSource\n    void singleArgument(Person person) {\n        // snip...\n    }\n\n    @ParameterizedTest\n    @InstancioSource\n    void multipleArguments(Foo foo, Bar bar, Baz baz) {\n        // snip...\n    }\n}\n</code></pre> <p><code>@InstancioSource</code> can also be used with data feeds. For example, assuming we have a custom <code>PersonFeed</code>:</p> <pre><code>@ParameterizedTest\n@InstancioSource\nvoid feedExample(PersonFeed feed) {\n    // snip...\n}\n</code></pre> <p>Methods annotated with <code>@InstancioSource</code> will execute multiple times, each time with a new set of random inputs to ensure better test coverage. The number of iterations can be configured using the <code>Keys.INSTANCIO_SOURCE_SAMPLES</code> setting, which defaults to <code>100</code>. In the following example, all test methods annotated with <code>@InstancioSource</code> in this test class will run <code>500</code> times:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @WithSettings\n    private static final Settings settings = Settings.create()\n        .set(Keys.INSTANCIO_SOURCE_SAMPLES, 500);\n\n    @ParameterizedTest\n    @InstancioSource\n    void example(Person person) {\n        // ...\n    }\n}\n</code></pre> <p>New behaviour since version <code>5.0.0</code>. In prior versions, <code>@InstancioSource</code> methods executed only once.</p> <p>Additionally, this can be overridden for a specific test method using the annotation's <code>samples</code> attribute:</p> <pre><code>@ParameterizedTest\n@InstancioSource(samples = 250)\nvoid example(Person person) {\n    // will run this test method 250 times\n}\n</code></pre>"},{"location":"user-guide/#using-given-with-instanciosource","title":"Using <code>@Given</code> with <code>@InstancioSource</code>","text":"<p>Methods annotated with <code>@InstancioSource</code> support the <code>@Given</code> annotation. Since <code>@InstancioSource</code> generates random arguments by default, the <code>@Given</code> annotation is only necessary when specifying a custom <code>GivenProvider</code> attribute.</p> <pre><code>@ParameterizedTest\n@InstancioSource\nvoid example(String randomString, @Given(CustomStringProvider.class) customString) {\n    // ...\n}\n</code></pre> <p>In this example, <code>randomString</code> is generated randomly, while <code>customString</code> is provided by <code>CustomStringProvider</code>.</p>"},{"location":"user-guide/#settings-injection","title":"Settings Injection","text":"<p>The <code>InstancioExtension</code> also adds support for injecting Settings into a test class. The injected settings will be used by every test method within the class. This can be done using the @WithSettings annotation.</p> Injecting Settings into a test class<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n        .set(Keys.COLLECTION_MIN_SIZE, 10);\n\n    @Test\n    void example() {\n        Person person = Instancio.create(Person.class);\n\n        assertThat(person.getPhoneNumbers())\n            .hasSizeGreaterThanOrEqualTo(10);\n    }\n}\n</code></pre> <p>4 Inject custom settings to be used by every test method within the class. 10 Every object will be created using the injected settings.</p> <p>There can be only one field annotated <code>@WithSettings</code> per test class.</p> <p>Instancio also supports overriding the injected settings using the <code>withSettings</code> method as shown below. The settings provided via the method take precedence over the injected settings (see Settings Precedence for further information).</p> Overriding injecting Settings<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n        .set(Keys.COLLECTION_MIN_SIZE, 10);\n\n    @Test\n    void overrideInjectedSettings() {\n        Person person = Instancio.of(Person.class)\n            .withSettings(Settings.create()\n                .set(Keys.COLLECTION_MAX_SIZE, 3))\n            .create();\n\n        assertThat(person.getPhoneNumbers())\n            .as(\"Injected settings can be overridden\")\n            .hasSizeLessThanOrEqualTo(3);\n    }\n}\n</code></pre> <p>11 Settings passed to the builder method take precedence over the injected settings.</p> <p>Instancio supports <code>@WithSettings</code> placed on static and non-static fields. However, if the test class contains a <code>@ParameterizedTest</code> method, then the settings field must be static.</p>"},{"location":"user-guide/#reproducing-failed-tests","title":"Reproducing Failed Tests","text":"<p>Since using Instancio in your tests runs your code against different inputs on each execution, the ability to reproduce failed tests with previously generated data becomes essential. Instancio supports this by reporting the seed value of a failed test in the failure message.</p>"},{"location":"user-guide/#data-guarantees","title":"Data Guarantees","text":"<p>The library guarantees that identical data is generated for a given seed and version of the library. This applies to all APIs except those marked with the <code>@NonDeterministic</code> annotation. An example of non-deterministic APIs are the <code>past()</code> and <code>future()</code> methods for generating temporal types. These methods depend on the current date as a reference point, which changes over time. Consequently, the same seed value might produce different results at different times.</p> <p>Hard-coding generated values in assertions is also highly discouraged to avoid breaking changes. For example, the following test suffers from tight coupling with the random number generator implementation and may break when upgrading to a newer version of Instancio.</p> <pre><code>Person person = Instancio.of(Person.class)\n    .withSeed(1234)\n    .create();\n\n// Not recommended!\nassertThat(person.getName()).isEqualTo(\"VEONRGF\");\nassertThat(person.getPhoneNumbers()).hasSize(3);\n</code></pre>"},{"location":"user-guide/#seed-lifecycle-in-a-junit-jupiter-test","title":"Seed Lifecycle in a JUnit Jupiter Test","text":"<p>Instancio initialises a seed value before each test method. This seed value is used for creating all objects during the test method's execution unless another seed is specified explicitly using the withSeed(long) method.</p> Seed Lifecycle in a JUnit Test<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @Test\n    void example() {\n\n        Person person1 = Instancio.create(Person.class);\n\n        Person person2 = Instancio.of(Person.class)\n            .withSeed(123)\n            .create();\n\n        Person person3 = Instancio.create(Person.class);\n\n    }\n}\n</code></pre> <p>5 Instancio initialises a random seed value, for example, <code>8276</code>. 7 Uses seed value <code>8276</code>. 10 Uses the supplied seed value <code>123</code>. 13 Uses seed value <code>8276</code>. 15 Seed value <code>8276</code> goes out of scope.</p> <p>Even though <code>person1</code> and <code>person3</code> are created using the same seed value of <code>8276</code>, they are actually distinct objects, each containing different values. This is because the same instance of the random number generator is used throughout the test method.</p> <p>It should be noted that if the test fails, only the seed generated internally is reported (<code>8276</code> in the above example). Seeds specified via <code>withSeed()</code> or <code>Settings</code> are not reported since the value is already known.</p>"},{"location":"user-guide/#test-failure-reporting","title":"Test Failure Reporting","text":"<p>When a test method fails, Instancio adds a message containing the seed value to the failed test's output. Using the following failing test as an example:</p> Test failure example<pre><code>@Test\nvoid verifyShippingAddress() {\n    Person person = Instancio.create(Person.class);\n\n    // Some method under test\n    Address address = shippingService.getShippingAddress(person);\n\n    // A failing assertion\n    assertThat(address).isEqualTo(person.getAddress());\n}\n</code></pre> <p>The failed test output will include the following message:</p> <pre><code>Test method 'verifyShippingAddress' failed with seed: 8532 (seed source: random seed)\n</code></pre> <p>The seed source indicates whether the Instancio extension generated a random seed or used a seed provided by the user. The possible seed sources are listed below (see also Specifying seed value):</p> <ul> <li>seed specified via <code>Settings</code> annotated with <code>@WithSettings</code></li> <li>seed specified using the <code>@Seed</code> annotation</li> <li>random seed (default behaviour when an explicit seed is not specified)</li> </ul> <p>Seeds specified using withSeed(long) or withSettings(Settings) methods are not reported by the Instancio extension.</p> <p>The failed test can be reproduced by using the seed reported in the failure message. This can be done by placing the @Seed annotation on the test method:</p> Reproducing a failed test<pre><code>@Test\n@Seed(8532)\nvoid verifyShippingAddress() {\n    // snip ... same test code as above\n}\n</code></pre> <p>2 Specifying the seed will reproduce previously generated values.</p> <p>With the <code>@Seed</code> annotation in place, the data becomes effectively static. This allows the root cause to be established and fixed. Once the test is passing, the <code>@Seed</code> annotation can be removed so that new data will be generated on each subsequent test run.</p>"},{"location":"user-guide/#appendix","title":"Appendix","text":""},{"location":"user-guide/#default-string-conversion","title":"Default String Conversion","text":"Type Conversion Function Sample Input <code>String</code> <code>Function.identity()</code> - <code>Enum</code> <code>Enum::valueOf</code> - <code>Character</code> <code>s -&gt; s.charAt(0)</code> <code>\"Example\"</code> -&gt; <code>'E'</code> <code>Boolean</code> <code>Boolean::valueOf</code> <code>\"true\"</code> or <code>\"false\"</code> <code>Integer</code> <code>Integer::valueOf</code> <code>\"123\"</code> <code>Long</code> <code>Long::valueOf</code> <code>\"123\"</code> <code>Byte</code> <code>Byte::valueOf</code> <code>\"123\"</code> <code>Short</code> <code>Short::valueOf</code> <code>\"123\"</code> <code>Float</code> <code>Float::valueOf</code> <code>\"123.5\"</code> <code>Double</code> <code>Double::valueOf</code> <code>\"123.5\"</code> <code>BigInteger</code> <code>BigInteger::new</code> <code>\"123\"</code> <code>BigDecimal</code> <code>BigDecimal::new</code> <code>\"123.5\"</code> <code>Instant</code> <code>Instant::parse</code> <code>\"2071-10-04T08:48:21.499609989Z\"</code> <code>LocalTime</code> <code>LocalTime::parse</code> <code>\"06:50:07.871441943\"</code> <code>LocalDate</code> <code>LocalDate::parse</code> <code>\"2048-12-24\"</code> <code>LocalDateTime</code> <code>LocalDateTime::parse</code> <code>\"2036-03-19T19:18:52.725994144\"</code> <code>OffsetTime</code> <code>OffsetTime::parse</code> <code>\"18:16:16.814320739Z\"</code> <code>OffsetDateTime</code> <code>OffsetDateTime::parse</code> <code>\"1975-12-04T07:34:43.807103492Z\"</code> <code>ZonedDateTime</code> <code>ZonedDateTime::parse</code> <code>\"2003-07-23T23:16:10.568513867Z\"</code> <code>YearMonth</code> <code>YearMonth::parse</code> <code>\"2045-05\"</code> <code>Year</code> <code>Year::parse</code> <code>\"1991\"</code> <code>UUID</code> <code>UUID::fromString</code> <code>\"5d418896-acf5-439e-902d-86a6c6fca4ae\"</code>"},{"location":"user-guide/#built-in-generators","title":"Built-in Generators","text":"<p>The list of generators provided below is available via the <code>generate()</code> method. Most of these generators are also available via <code>Instancio.gen()</code> class. Each one offers customisation options relevant to the class it generates, for example <code>bigDecimal().scale(5)</code>.</p> <p>Tip</p> <p>See the  <code>org.instancio.generator.specs</code> package Javadocs for methods offered by the built-in generators below.</p> <pre><code>Generators\n\u2502\n\u251c\u2500\u2500 booleans()\n\u251c\u2500\u2500 chars()\n\u251c\u2500\u2500 bytes()\n\u251c\u2500\u2500 shorts()\n\u251c\u2500\u2500 ints()\n\u251c\u2500\u2500 longs()\n\u251c\u2500\u2500 floats()\n\u251c\u2500\u2500 doubles()\n\u251c\u2500\u2500 string()\n\u2502\n\u251c\u2500\u2500 array()\n\u251c\u2500\u2500 collection()\n\u251c\u2500\u2500 map()\n\u251c\u2500\u2500 emit()\n\u251c\u2500\u2500 enumOf(Class&lt;E&gt;)\n\u251c\u2500\u2500 enumSet(Class&lt;E&gt;)\n\u2502\n\u251c\u2500\u2500 oneOf(Collection&lt;T&gt;)\n\u251c\u2500\u2500 oneOf(T...)\n\u2502\n\u251c\u2500\u2500 optional()\n\u2502\n\u251c\u2500\u2500 math()\n\u2502   \u251c\u2500\u2500 bigInteger()\n\u2502   \u2514\u2500\u2500 bigDecimal()\n\u2502\n\u251c\u2500\u2500 net()\n\u2502   \u251c\u2500\u2500 email()\n\u2502   \u251c\u2500\u2500 ip4()\n\u2502   \u251c\u2500\u2500 uri()\n\u2502   \u2514\u2500\u2500 url()\n\u2502\n\u251c\u2500\u2500 intervalStarting(T)\n\u2502\n\u251c\u2500\u2500 io()\n\u2502   \u2514\u2500\u2500 file()\n\u2502\n\u251c\u2500\u2500 nio()\n\u2502   \u2514\u2500\u2500 path()\n\u2502\n\u251c\u2500\u2500 atomic()\n\u2502   \u251c\u2500\u2500 atomicInteger()\n\u2502   \u2514\u2500\u2500 atomicLong()\n\u2502\n\u251c\u2500\u2500 temporal()\n\u2502   \u251c\u2500\u2500 calendar()\n\u2502   \u251c\u2500\u2500 date()\n\u2502   \u251c\u2500\u2500 duration()\n\u2502   \u251c\u2500\u2500 instant()\n\u2502   \u251c\u2500\u2500 localDate()\n\u2502   \u251c\u2500\u2500 localDateTime()\n\u2502   \u251c\u2500\u2500 localTime()\n\u2502   \u251c\u2500\u2500 offsetDateTime()\n\u2502   \u251c\u2500\u2500 offsetTime()\n\u2502   \u251c\u2500\u2500 period()\n\u2502   \u251c\u2500\u2500 sqlDate()\n\u2502   \u251c\u2500\u2500 timestamp()\n\u2502   \u251c\u2500\u2500 year()\n\u2502   \u251c\u2500\u2500 yearMonth()\n\u2502   \u2514\u2500\u2500 zonedDateTime()\n\u2502\n\u251c\u2500\u2500 text()\n\u2502   \u251c\u2500\u2500 csv()\n\u2502   \u251c\u2500\u2500 loremIpsum()\n\u2502   \u251c\u2500\u2500 pattern(String)\n\u2502   \u251c\u2500\u2500 uuid()\n\u2502   \u251c\u2500\u2500 word()\n\u2502   \u2514\u2500\u2500 wordTemplate(String)\n\u2502\n\u251c\u2500\u2500 checksum()\n\u2502   \u251c\u2500\u2500 luhn()\n\u2502   \u251c\u2500\u2500 mod10()\n\u2502   \u2514\u2500\u2500 mod11()\n\u2502\n\u251c\u2500\u2500 finance()\n\u2502   \u2514\u2500\u2500 creditCard()\n\u2502\n\u251c\u2500\u2500 id()\n\u2502   \u251c\u2500\u2500 ean()\n\u2502   \u251c\u2500\u2500 isbn()\n\u2502   \u251c\u2500\u2500 bra()\n\u2502   \u2502   \u251c\u2500\u2500 cpf()\n\u2502   \u2502   \u251c\u2500\u2500 cnpj()\n\u2502   \u2502   \u2514\u2500\u2500 tituloEleitoral()\n\u2502   \u251c\u2500\u2500 can()\n\u2502   \u2502   \u2514\u2500\u2500 sin()\n\u2502   \u251c\u2500\u2500 pol()\n\u2502   \u2502   \u251c\u2500\u2500 nip()\n\u2502   \u2502   \u251c\u2500\u2500 pesel()\n\u2502   \u2502   \u2514\u2500\u2500 regon()\n\u2502   \u251c\u2500\u2500 rus()\n\u2502   \u2502   \u2514\u2500\u2500 inn()\n\u2502   \u2514\u2500\u2500 usa()\n\u2502       \u2514\u2500\u2500 ssn()\n\u2502\n\u251c\u2500\u2500 shuffle(T...)\n\u251c\u2500\u2500 shuffle(Collection&lt;T&gt;)\n\u2502\n\u2514\u2500\u2500 spatial()\n    \u2514\u2500\u2500 coordinate()\n        \u251c\u2500\u2500 lat()\n        \u2514\u2500\u2500 lon()\n</code></pre> <p>The <code>io().file()</code> and <code>nio().path()</code> generators can save files on the filesystem.</p>"},{"location":"articles/creating-object-templates-using-models/","title":"Creating object templates using Models","text":""},{"location":"articles/creating-object-templates-using-models/#introduction","title":"Introduction","text":"<p>One of the challenges of setting up data for different test cases is creating objects in different states. Test classes will often have helper methods with arguments for creating objects. Even worse, common setup code will sometimes be duplicated across test methods. Manual data setup can get quite complicated as classes get bigger and more complex. This is especially true for classes with many relationships. In this article, we will show how Models can be used to solve these challenges.</p> <p>GitHub link to the sample project is provided at the end of the article.</p>"},{"location":"articles/creating-object-templates-using-models/#testing-background","title":"Testing background","text":"<p>We will be testing a service that converts a college <code>Applicant</code> to an Avro class <code>ApplicantAvro</code>. The <code>Applicant</code> class is provided below. The <code>ApplicantAvro</code> class is auto-generated using an Avro schema, but essentially it has the same structure.</p> <pre><code>class Applicant {\n    Long id;\n    String firstName;\n    String middleName;\n    String lastName;\n    Integer age;\n    Grade grade;\n    Address address;\n}\n\nenum Grade { A, B, C, D, F }\n\nclass Address {\n    String street;\n    String city;\n    String country;\n    String postalCode;\n}\n</code></pre> <p>Our conversion service <code>ApplicantToAvroMapper</code> requires that an applicant is 18-25 years old and has achieved grade A or B. If those conditions are met, it constructs an Avro object and returns it as the result.</p> <pre><code>public class ApplicantToAvroMapper {\n\n    public ApplicantAvro toAvro(final Applicant applicant) {\n        Validate.isTrue(applicant.getAge() &gt;= 18 &amp;&amp; applicant.getAge() &lt;= 25,\n                \"Applicant must be between 18 and 25 years of age\");\n\n        Validate.isTrue(applicant.getGrade() == Grade.A || applicant.getGrade() == Grade.B,\n                \"Applicant's grade must be either A or B\");\n\n        return ApplicantAvro.newBuilder()\n                .setFirstName(applicant.getFirstName())\n                .setMiddleName(applicant.getMiddleName())\n                .setLastName(applicant.getLastName())\n                .setAge(applicant.getAge())\n                .setGrade(applicant.getGrade().toString())\n                .setAddress(addressToAvro(applicant.getAddress()))\n                .build();\n    }\n\n    private AddressAvro addressToAvro(Address address) {\n        return address == null ? null : AddressAvro.newBuilder()\n                .setStreet(address.getStreet())\n                .setCity(address.getCity())\n                .setPostalCode(address.getPostalCode())\n                .setCountry(address.getCountry())\n                .build();\n    }\n</code></pre> <p>In addition, the Avro schema requires all the fields to be non-null except <code>middleName</code> and <code>postalCode</code>. If a required field is <code>null</code>, the Avro builder will throw an <code>AvroRuntimeException</code>.</p>"},{"location":"articles/creating-object-templates-using-models/#test-cases","title":"Test cases","text":"<p>Good tests should cover all branches of conditional logic. This gives us greater confidence in our code and oftentimes uncovers issues we may have overlooked. Although our service is very simple, it still presents a few scenarios that need to be covered.</p> Test case Expectation Successful conversion An <code>ApplicantAvro</code> object Applicant is under 18 Validation error: <code>IllegalArgumentException</code> Applicant is over 25 Validation error: <code>IllegalArgumentException</code> Applicant has grade C, D, or E Validation error: <code>IllegalArgumentException</code> Applicant missing required data Conversion error: <code>AvroRuntimeException</code> Applicant missing optional data An <code>ApplicantAvro</code> object"},{"location":"articles/creating-object-templates-using-models/#successful-scenario","title":"Successful scenario","text":"<p>Testing the successful scenario \"should be\" straightforward:</p> <ul> <li>construct a valid object (age 18-25, grade A or B, and all required fields are not null)</li> <li>pass it to the method under test</li> <li>verify result has expected values</li> </ul> <p>However, if we want to be thorough, then we need to verify as many valid states as reasonably possible. For example, is the range inclusive or exclusive? Our range is inclusive, so we should have a test for an applicant aged 18, and another 25. We don't really need to verify the numbers in the middle. This will ensure our service implemented the numeric bounds check correctly. We should also test an applicant with grade A, and another with grade B. Finally, we should verify that our service is not rejecting an applicant if optional data (such as <code>middleName</code>) is missing.</p>"},{"location":"articles/creating-object-templates-using-models/#application-validation","title":"Application validation","text":"<p>Testing validation errors also \"should not\" be too difficult:</p> <ul> <li>construct an invalid object</li> <li>pass it to the method under test</li> <li>verify the method throws the expected exception</li> </ul> <p>Here again we should cover as many bases as reasonably possible. This includes applicants aged 17 and 26 and those with grades C, D, and F.</p>"},{"location":"articles/creating-object-templates-using-models/#schema-validation","title":"Schema validation","text":"<p>Finally, we have schema validation implemented within auto-generated Avro classes. For example, <code>firstName</code> is required in our schema, therefore passing <code>null</code> to <code>setFirstName()</code> will throw an <code>AvroRuntimeException</code>. We should have a test for that. Ideally, we should verify this with every required field being <code>null</code>. Doing so has two benefits:</p> <ol> <li>it guarantees that we will not introduce unintended changes when modifying the schema in the future;</li> <li>if we switch from Avro to another format, the test will ensure the same constraints are enforced in the new schema.</li> </ol> <p>However, most real world projects will rarely go this far due to time constraints or simply because it is too much effort. We will look at how to implement such a test fairly easily using Instancio.</p>"},{"location":"articles/creating-object-templates-using-models/#writing-tests","title":"Writing tests","text":""},{"location":"articles/creating-object-templates-using-models/#implementing-successful-scenario-tests","title":"Implementing successful scenario tests","text":"<p>Let's start by testing a valid applicant. Typically, it will be implemented as follows:</p> <pre><code>@Test\n@DisplayName(\"Valid applicant should be successfully converted to Avro\")\nvoid verifyValidApplicantAvro() {\n    // Given\n    Applicant applicant = createValidApplicant();\n\n    // When\n    ApplicantAvro applicantAvro = mapper.toAvro(applicant);\n\n    // Then\n    assertThat(applicantAvro).isNotNull();\n    assertThat(applicantAvro.getFirstName()).isEqualTo(applicant.getFirstName());\n    assertThat(applicantAvro.getMiddleName()).isEqualTo(applicant.getMiddleName());\n    assertThat(applicantAvro.getLastName()).isEqualTo(applicant.getLastName());\n    assertThat(applicantAvro.getAge()).isEqualTo(applicant.getAge());\n    assertThat(applicantAvro.getGrade()).isEqualTo(applicant.getGrade().name());\n    assertThat(applicantAvro.getAddress()).isNotNull();\n\n    Address address = applicant.getAddress();\n    AddressAvro addressAvro = applicantAvro.getAddress();\n    assertThat(addressAvro.getStreet()).isEqualTo(address.getStreet());\n    assertThat(addressAvro.getCity()).isEqualTo(address.getCity());\n    assertThat(addressAvro.getCountry()).isEqualTo(address.getCountry());\n    assertThat(addressAvro.getPostalCode()).isEqualTo(address.getPostalCode());\n}\n\nprivate static Applicant createValidApplicant() {\n    Address address = new Address();\n    address.setStreet(\"street\");\n    address.setCity(\"city\");\n    address.setCountry(\"country\");\n    address.setPostalCode(\"postal-code\");\n\n    Applicant applicant = new Applicant();\n    applicant.setFirstName(\"first-name\");\n    applicant.setLastName(\"last-name\");\n    applicant.setAge(18);\n    applicant.setGrade(Grade.A);\n    applicant.setAddress(address);\n\n    return applicant;\n}\n</code></pre> <p>We create a valid applicant and pass it to the method under test. However, note the highlighted lines. The above test does not verify other successful scenarios we outlined earlier. To do so, we can add parameters using JUnit 5 <code>@ParameterizedTest</code> to construct an applicant with different values. The updated code is shown below. JUnit will automatically convert parameters to correct types, including the enum.</p> <pre><code>@CsvSource({\n        \"18, A\",\n        \"18, B\",\n        \"25, A\",\n        \"25, B\"\n})\n@ParameterizedTest\nvoid verifyValidApplicantAvro(int age, Grade grade) {\n    Applicant applicant = createValidApplicant(age, grade);\n    ApplicantAvro applicantAvro = mapper.toAvro(applicant);\n    // Remaining code is the same\n}\n\nprivate static Applicant createValidApplicant(int age, Grade grade) {\n    Applicant applicant = new Applicant();\n    applicant.setAge(age);\n    applicant.setGrade(grade);\n    // Remaining code is the same\n\n    return applicant;\n}\n</code></pre> <p>Finally, we need to verify that the service does not reject an applicant if optional fields <code>middleName</code> and <code>postalCode</code> are <code>null</code>. At this point, the test is already starting to get more complicated and forcing us to make decisions on how to proceed. Possible options are:</p> <ol> <li>update the parameterized test to include <code>middleName</code> and <code>postalCode</code></li> <li>do not populate optional fields in <code>createValidApplicant()</code></li> <li>refactor <code>ParameterizedTest</code> to use <code>@MethodSource</code> instead of <code>@CsvSource</code></li> <li>create a new test method</li> </ol> <p>Option 1 seems messy. Adding parameters makes the code harder to read and maintain. What if we need to add more optional parameters in the future?</p> <p>Clean Code, Robert C. Martin</p> <p>The ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification - and then shouldn\u2019t be used anyway.</p> <p>Option 2 is also not ideal. If the optional values are <code>null</code> then we are no longer testing the mapping for those fields. Both, expected and actual, would always be <code>null</code> giving us a false sense of confidence.</p> <pre><code>assertThat(applicantAvro.getMiddleName()).isEqualTo(applicant.getMiddleName());\nassertThat(addressAvro.getPostalCode()).isEqualTo(address.getPostalCode());\n</code></pre> <p>Option 3 would be to modify the test method. Maybe instead of passing individual arguments to the parameterized test, we pass an <code>Applicant</code> object as an argument. This can be implemented using <code>@MethodSource</code> as the source of arguments.</p> <pre><code>@MethodSource(\"validApplicants\")\n@ParameterizedTest\nvoid verifyValidApplicantAvro(Applicant applicant) {\n    ApplicantAvro applicantAvro = mapper.toAvro(applicant);\n    // Remaining code is the same\n}\n\nprivate static Stream&lt;Arguments&gt; validApplicants() {\n    Applicant applicant1 = createValidApplicant(18, Grade.A);\n    Applicant applicant2 = createValidApplicant(18, Grade.B);\n\n    // Set optional fields to null\n    Applicant applicant3 = createValidApplicant(25, Grade.B);\n    applicant3.setMiddleName(null);\n    applicant3.getAddress().setPostalCode(null);\n\n    return Stream.of(\n            Arguments.of(applicant1),\n            Arguments.of(applicant2),\n            Arguments.of(applicant3)\n            // etc...\n    );\n}\n</code></pre> <p>Option 4 is to simply create a new test method as shown below. Since we are adding a new test method, we will need refactor the assertions into a separate <code>assertApplicant()</code> method to avoid duplicating them.</p> <pre><code>@Test\n@DisplayName(\"Applicant with missing optional data should not be rejected\")\nvoid applicantWithMissingOptionalData() {\n    // Given\n    Applicant applicant = createValidApplicant(18, Grade.A);\n    applicant.setMiddleName(null);\n    applicant.getAddress().setPostalCode(null);\n\n    // When\n    ApplicantAvro applicantAvro = mapper.toAvro(applicant);\n\n    // Then\n    assertApplicant(applicant, applicantAvro);\n}\n\nprivate static void assertApplicant(final Applicant applicant, final ApplicantAvro applicantAvro) {\n    assertThat(applicantAvro.getFirstName()).isEqualTo(applicant.getFirstName());\n    assertThat(applicantAvro.getMiddleName()).isEqualTo(applicant.getMiddleName());\n    // Remaining assertions...\n}\n</code></pre>"},{"location":"articles/creating-object-templates-using-models/#improving-the-test","title":"Improving the test","text":"<p>As we saw, test code can start to get more complicated and time-consuming very quickly even with our simple service. Let's see how we can improve it. We are going to replace the data setup method by delegating object creation to Instancio. An <code>Applicant</code> can be created simply as follows:</p> <pre><code>Applicant applicant = Instancio.create(Applicant.class);\n</code></pre> <p>However, since we need a valid applicant with a certain age range and grades, we need to specify those parameters as well. Below is our test and the updated <code>createValidApplicant()</code> method:</p> <pre><code>@Test\n@DisplayName(\"Valid applicant should be successfully converted to Avro\")\nvoid verifyValidApplicantAvro() {\n    Applicant applicant = Instancio.create(createValidApplicant());\n    // Remaining code is the same\n}\n\nprivate static Applicant createValidApplicant() {\n    return Instancio.of(Applicant.class)\n            .generate(field(\"age\"), gen -&gt; gen.ints().range(18, 25))\n            .generate(all(Grade.class), gen -&gt; gen.oneOf(Grade.A, Grade.B))\n            .create();\n}\n</code></pre> <p>Notice that we no longer need to use <code>@ParameterizedTest</code> or worry about populating a valid <code>Applicant</code> object in different states. When the test runs, Instancio will generate an <code>Applicant</code> based on the specified parameters. Since the object is randomly generated, our test will automatically cover different permutations of valid applicants.</p> <p>We also need to verify that when optional fields are <code>null</code>, the method under test still works as expected. By default, Instancio generates non-null values. Therefore, we need to specify which fields are nullable. This can be done by tweaking <code>Applicant</code> creation as follows:</p> <pre><code>private static Applicant createValidApplicant() {\n    return Instancio.of(Applicant.class)\n            .withNullable(all(\n                    field(\"middleName\"),\n                    field(Address.class, \"postalCode\")))\n            .generate(field(\"age\"), gen -&gt; gen.ints().range(18, 25))\n            .generate(all(Grade.class), gen -&gt; gen.oneOf(Grade.A, Grade.B))\n            .create();\n</code></pre> <p>The <code>withNullable()</code>  method will randomly generate <code>null</code> values for the specified fields. The <code>all()</code> selector is a convenience method for grouping multiple selectors together.</p> <p>Finally, JUnit 5 offers the <code>@RepeatedTest</code> annotation which can be used for executing a test multiple times. We could use this annotation to ensure a greater number of data permutations our test is run against. It might be unnecessary given the limited range of inputs in this simple example, however, it is a good option to have at disposal when working with larger data sets.</p> <pre><code>@RepeatedTest(10)\nvoid verifyValidApplicantAvro() { ... }\n</code></pre> <p>This completes our \"success scenario\" test case. Next we will test the validation rules.</p>"},{"location":"articles/creating-object-templates-using-models/#implementing-application-validation-tests","title":"Implementing application validation tests","text":"<p>As a reminder, the service throws an exception if an <code>Applicant</code> does not meet the following requirements:</p> <pre><code>public ApplicantAvro toAvro(Applicant applicant) {\n\n    Validate.isTrue(applicant.getAge() &gt;= 18 &amp;&amp; applicant.getAge() &lt;= 25,\n            \"Applicant must be between 18 and 25 years of age\");\n\n    Validate.isTrue(applicant.getGrade() == Grade.A || applicant.getGrade() == Grade.B,\n            \"Applicant's grade must be either A or B\");\n\n    // ...snip...\n}\n</code></pre> <p>Just as before, this requires constructing <code>Applicant</code> objects in different states. This time we will solve the problem using an Instancio <code>Model</code>. A model can be thought of as a template for generating objects. To create a model, the <code>createValidApplicant()</code> method can be modified as follows:</p> <pre><code>private static Model&lt;Applicant&gt; createValidApplicantModel() {\n    return Instancio.of(Applicant.class)\n            .withNullable(all(\n                    field(\"middleName\"),\n                    field(Address.class, \"postalCode\")))\n            .generate(field(\"age\"), gen -&gt; gen.ints().range(18, 25))\n            .generate(all(Grade.class), gen -&gt; gen.oneOf(Grade.A, Grade.B))\n            .toModel();\n}\n</code></pre> <p>The highlighted lines are the modifications. First, the method signature now returns <code>Model&lt;Applicant&gt;</code> (and the method was renamed to <code>createValidApplicantModel()</code>). The second change is instead of calling <code>create()</code>, which returns an <code>Applicant</code> instance, now we call <code>toModel()</code>. We can now use this model instance as a template to generate <code>Applicant</code> instances as follows:</p> <pre><code>Applicant applicant = Instancio.create(createValidApplicantModel());\n</code></pre> <p>Using the valid applicant model, we can also construct invalid applicants by overriding certain parameters. For example, age validation can be verified by using the valid applicant model and applying invalid age parameters as shown below.</p> <pre><code>@Test\n@DisplayName(\"Validation should fail if applicant is under 18 or over 25\")\nvoid applicantAgeValidation() {\n    Applicant applicant = Instancio.of(createValidApplicantModel())\n            .generate(field(\"age\"), gen -&gt; gen.oneOf(17, 26))\n            .create();\n\n    assertThatThrownBy(() -&gt; mapper.toAvro(applicant))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Applicant must be between 18 and 25 years of age\");\n}\n</code></pre> <p>The single test above covers applicants below and above the required age range. Grade validation can be tested in a similar manner by verifying grades C, D, and F.</p> <pre><code>@Test\n@DisplayName(\"Validation should fail if applicant's grade is lower than B\")\nvoid applicantGradeValidation() {\n    Applicant applicant = Instancio.of(createValidApplicantModel())\n            .generate(all(Grade.class), gen -&gt; gen.oneOf(Grade.C, Grade.D, Grade.F))\n            .create();\n\n    assertThatThrownBy(() -&gt; mapper.toAvro(applicant))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Applicant's grade must be either A or B\");\n}\n</code></pre>"},{"location":"articles/creating-object-templates-using-models/#implementing-schema-validation-tests","title":"Implementing schema validation tests","text":"<p>The last test left to implement is to verify the schema. We want to ensure that if any required field is set to <code>null</code>, the service throws the <code>AvroRuntimeException</code>. Essentially, we only want to test one required <code>null</code> field at a time. In order to achieve this goal, we will again use our applicant <code>Model</code> as the starting point and then nullify a required field. We will repeat this process for each required field, as shown in the following method.</p> <pre><code>@Test\n@DisplayName(\"Should throw AvroRuntimeException if any of the required fields is null\")\nvoid shouldThrowAvroRuntimeExceptionIfRequiredDataIsMissing() {\n    Selector[] requiredFields = {\n            field(Applicant::getFirstName),\n            field(Applicant::getLastName),\n            field(Address::getStreet),\n            field(Address::getCity),\n            field(Address::getCountry)\n    };\n\n    // Set each of these to null individually, so that only one required field is null at a time\n    Arrays.stream(requiredFields).forEach(selector -&gt; {\n        // Given\n        Applicant applicant = Instancio.of(createValidApplicantModel())\n                .set(selector, null)\n                .create();\n\n        // Then\n        assertThatThrownBy(() -&gt; mapper.toAvro(applicant))\n                .as(\"Expected %s to be required\", selector)\n                .isInstanceOf(AvroRuntimeException.class);\n    });\n}\n</code></pre> <p>Being able to select fields programmatically offers allows us to implement this type of test fairly easily. Without library support, this type of testing would be tedious to implement. It would require manually calling setters with a <code>null</code> value or implementing similar logic using reflection. Neither of these options are practical.</p>"},{"location":"articles/creating-object-templates-using-models/#conclusion","title":"Conclusion","text":"<p>This concludes an overview of models. As we saw, writing tests can get tricky even when the class under test is fairly simple. Populating objects can be time-consuming. In addition, constructing objects in different states for different test cases presents its own challenges.</p> <p>Using a data generator alleviates some of the above challenges. The random nature of the data allows us to test a wider range of conditions. This can reduce the number of test methods required to verify different outcomes. Test methods themselves become simpler. For example, in a lot of cases we can eliminate the need for <code>@ParameterizedTest</code>. In addition, the data setup code is more concise since we no longer need to manually populate objects. The data setup code itself is easier to maintain and more flexible to change.</p>"},{"location":"articles/creating-object-templates-using-models/#source-code","title":"Source code","text":"<p>Source code from this article is available as a Maven project from the instancio-samples repository:</p> <pre><code>git clone https://github.com/instancio/instancio-samples.git\ncd instancio-samples/instancio-models-sample\nmvn package\n</code></pre>"},{"location":"articles/how-to-override-default-settings/","title":"How to override default settings","text":""},{"location":"articles/how-to-override-default-settings/#introduction","title":"Introduction","text":"<p>Out of the box, Instancio is pre-configured with \"sensible defaults\". For example, when populating an object it will set fields to non-null values, create non-empty collections, generate positive numbers, etc. For cases where these defaults are not acceptable they can be modified as follows:</p> <ul> <li>globally, using a configuration file</li> <li>per test class using settings injection</li> <li>per object using the API</li> </ul> <p>This article provides on overview of how to achieve the above goals.</p>"},{"location":"articles/how-to-override-default-settings/#settings-api-and-default-values","title":"Settings API and default values","text":"<p>Instancio configuration is encapsulated by the Settings class which provides the API for modifying settings at runtime. This class is essentially a map of SettingKey objects and their values. A setting key represents a configuration item. It has a default value and a property name that can be used in a configuration file. The complete list of keys can be found in the Keys Javadoc. The following are a few examples:</p> <ul> <li><code>Keys.COLLECTION_MAX_SIZE</code> - specifies maximum size for collections<ul> <li>default value: <code>6</code></li> <li>property name: <code>collection.max.size</code></li> </ul> </li> <li><code>Keys.INTEGER_MIN</code> - specifies minimum value for integers<ul> <li>default value: <code>1</code></li> <li>property name: <code>integer.min</code></li> </ul> </li> <li><code>Keys.STRING_NULLABLE</code> - specifies whether a <code>null</code> can be generated for String type<ul> <li>default value: <code>false</code></li> <li>property name: <code>string.nullable</code></li> </ul> </li> </ul> <p>The <code>Settings</code> class provides two static methods for creating an instance:</p> <ul> <li><code>Settings.create()</code> returns a new instance of blank settings</li> <li><code>Settings.defaults()</code> returns a new instance containing default settings</li> </ul> <p>If no custom settings are provided, Instancio will use default settings as returned by <code>Settings.defaults()</code>.</p>"},{"location":"articles/how-to-override-default-settings/#overriding-settings-per-object","title":"Overriding settings per object","text":"<p>Settings can be customised per object using the <code>Settings</code> class. For example, the following snippet creates a person allowing <code>null</code> and empty strings to be generated:</p> Example of custom settings per object<pre><code>Settings settings = Settings.create()\n    .set(Keys.STRING_NULLABLE, true)\n    .set(Keys.STRING_ALLOW_EMPTY, true);\n\nPerson person = Instancio.of(Person.class)\n    .withSettings(settings)\n    .create();\n</code></pre>"},{"location":"articles/how-to-override-default-settings/#overriding-settings-per-test-class","title":"Overriding settings per test class","text":"<p>Using <code>InstancioExtension</code> with JUnit 5 allows injecting settings into a test class. This can be achieved by annotating the <code>Settings</code> field with <code>@WithSettings</code>.</p> Example of custom settings per test class<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n            .set(Keys.COLLECTION_MIN_SIZE, 10);\n\n    @Test\n    void verifyPerson() {\n        Person person = Instancio.create(Person.class);\n\n        assertThat(person.getHobbies()).hasSizeGreaterThanOrEqualTo(10);\n    }\n}\n</code></pre> <p>The benefit of this approach is that all test methods within the class will use the specified settings. It is more concise as there is no need to call <code>withSettings(settings)</code> manually on each object.</p>"},{"location":"articles/how-to-override-default-settings/#overriding-settings-globally-using-instancioproperties","title":"Overriding settings globally using <code>instancio.properties</code>","text":"<p>Overriding settings globally can be done by placing a file named <code>instancio.properties</code> on the classpath. Instancio loads this file automatically and uses its values to override the defaults. For example, assuming we have the following file:</p> Example of instancio.properties<pre><code>integer.min=0\ninteger.max=100\n</code></pre> <p>all integers generated by Instancio will be within the given range.</p> <pre><code>Person person = Instancio.create(Person.class);\nassertThat(person.getAge()).isBetween(0, 100);\n</code></pre> <p>A sample properties file with available keys is provided in the user guide.</p>"},{"location":"articles/how-to-override-default-settings/#configuration-precedence","title":"Configuration precedence","text":"<p>Since there are three ways to provide configuration, Instancio has the following precedence rules when resolving configuration values. From lowest to highest:</p> <ul> <li>Configuration from <code>instancio.properties</code></li> <li>Configuration from <code>@WithSettings</code></li> <li>Configuration from <code>withSettings()</code></li> </ul> <p>As an example, assume we have this configuration file on the classpath:</p> instancio.properties<pre><code>integer.min=10\ninteger.max=99\n</code></pre> <p>The properties file is loaded automatically from the classpath. Therefore the following snippet will generate a number in the 10..99 range.</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass SettingsPrecedenceExampleTest {\n\n    @Test\n    void overridingSettings() {\n        int n = Instancio.create(Integer.class);\n        assertThat(n).isBetween(10, 99);\n    }\n}\n</code></pre> <p>Next we will modify the above class to override the configuration by injecting <code>Settings</code> into the test class:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass SettingsPrecedenceExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n            .set(Keys.INTEGER_MIN, 100)\n            .set(Keys.INTEGER_MAX, 999);\n\n    @Test\n    void overridingSettings() {\n        int x = Instancio.create(Integer.class);\n        assertThat(x).isBetween(100, 999);\n    }\n}\n</code></pre> <p>Since <code>@WithSettings</code> has higher precedence than the properties file, the generated number <code>x</code> will be within the 100..999 range.</p> <p>Finally, we will override settings by passing an instance via the API:</p> <pre><code>@ExtendWith(InstancioExtension.class)\nclass SettingsPrecedenceExampleTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n            .set(Keys.INTEGER_MIN, 100)\n            .set(Keys.INTEGER_MAX, 999);\n\n    @Test\n    void overridingSettings() {\n        int x = Instancio.of(Integer.class)\n                .withSettings(Settings.create()\n                        .set(Keys.INTEGER_MIN, 1000)\n                        .set(Keys.INTEGER_MAX, 9999))\n                .create();\n\n        assertThat(x).isBetween(1000, 9999);\n    }\n}\n</code></pre> <p>Configuration provided using <code>withSettings(Settings)</code> method has higher precedence than configuration from <code>instancio.properties</code> and <code>@WithSettings</code>. Therefore, in the above example <code>x</code> will be in the 1000..9999 range.</p>"},{"location":"articles/using-instancio-with-junit-jupiter/","title":"Using Instancio with JUnit 5","text":"<p>This article is an introduction to using Instancio extension for JUnit 5. Here we will cover</p> <ul> <li>using <code>InstancioExtension</code> for reproducing failed tests</li> <li>injecting settings into test classes</li> <li>running tests with custom seed values</li> <li>generating data for <code>@ParameterizedTest</code></li> </ul>"},{"location":"articles/using-instancio-with-junit-jupiter/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>You will need to include <code>instancio-junit</code> dependency.</li> <li>It is assumed you already have JUnit 5 on the classpath.</li> </ul> MavenGradle Maven<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.instancio&lt;/groupId&gt;\n    &lt;artifactId&gt;instancio-junit&lt;/artifactId&gt;\n    &lt;version&gt;5.5.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> Gradle<pre><code>dependencies {\n    testImplementation 'org.instancio:instancio-junit:5.5.1'\n}\n</code></pre>"},{"location":"articles/using-instancio-with-junit-jupiter/#why-use-the-instancio-junit-extension","title":"Why use the Instancio JUnit extension","text":"<p>By default, Instancio tests your code against randomly generated data. Unless you configured it otherwise, each time a test is executed, it is run against a different data set. This brings up the question of how to reproduce a failed test? One of the benefits of the extension is that it reports the seed value that was used to generate the data. Knowing the seed value allows us to reproduce the original data that caused the test to fail.</p> <p>To get started, we will need to declare the extension in our test class. This is similar to using other test extensions, such as <code>MockitoExtension</code>. In fact, they can be used together if both are needed. We will use the following sample test case verifying the conversion of a <code>Person</code> to <code>PersonDTO</code>.</p> Sample test class<pre><code>@ExtendWith(InstancioExtension.class)\nclass PersonToPersonDTOTest {\n\n    @Test\n    void verifyPersonDTO() {\n        Person person = Instancio.create(Person.class);\n\n        // Method under test\n        PersonDTO dto = personMapper.toDto(person);\n\n        assertThat(dto.getFirstName()).isEqualTo(person.getFirstName());\n        assertThat(dto.getLastName()).isEqualTo(person.getSurname());\n        // ... remaining assertions\n    }\n}\n</code></pre> <p>If this test fails, Instancio will report the failure as follows:</p> <pre><code>Test method 'verifyPersonDTO' failed with seed: 34567\n</code></pre> <p>Using the reported seed value <code>34567</code>, we can annotate the test method to reproduce the data:</p> Reproducing the data<pre><code>@ExtendWith(InstancioExtension.class)\nclass ExampleTest{\n\n    @Seed(34567)\n    @Test\n    void verifyPersonDTO() {\n      // same code as before\n    }\n}\n</code></pre> <p>4 Placing the seed annotation as shown above will make the data effectively static.</p> <p>Now each time the test is run, it will produce the same data, allowing us to fix the cause of the failure. Once the cause is resolved, the <code>@Seed</code> annotation can be removed so that new data will be generated on each subsequent test run. How this works is described in more detail in the user guide, but to summarise, Instancio supplies each test method with a seed value. If the <code>@Seed</code> annotation is present, Instancio will use its value; if not, it will generate a random seed.</p>"},{"location":"articles/using-instancio-with-junit-jupiter/#injecting-settings-into-tests","title":"Injecting Settings into tests","text":"<p>Another feature provided by the extension is its support for injecting custom settings. Instancio settings are encapsulated by the <code>Settings</code> class. This allows overriding various parameters like generated number ranges; array, map, and collection sizes; whether generated values can be null, and so on. For example, by default, Instancio generates</p> <ul> <li>non-null values</li> <li>non-empty collections</li> <li>positive numbers</li> </ul> <p>Using <code>@WithSettings</code> annotation we can override default behaviour as follows:</p> Injecting settings<pre><code>@ExtendWith(InstancioExtension.class)\nclass PersonToPersonDTOTest {\n\n    @WithSettings\n    private final Settings settings = Settings.create()\n            .set(Keys.COLLECTION_MIN_SIZE, 0)\n            .set(Keys.COLLECTION_MAX_SIZE, 5)\n            .set(Keys.INTEGER_MIN, Integer.MIN_VALUE)\n            .set(Keys.INTEGER_MAX, Integer.MAX_VALUE)\n            .set(Keys.STRING_NULLABLE, true);\n\n    @Test\n    void verifyPersonDTO() {\n        // person will populated using above settings\n        Person person = Instancio.create(Person.class);\n        // ... snip\n    }\n}\n</code></pre> <p>With the above settings in place, Instancio might generate <code>null</code> strings, empty collections, and negative integers. The settings will apply to test methods in this test class only. If you need to override settings globally, this can be done by placing instancio.properties file at the root of the classpath.</p>"},{"location":"articles/using-instancio-with-junit-jupiter/#instancio-arguments-source","title":"Instancio Arguments Source","text":"<p>Last but not least, you can use the <code>@InstancioSource</code> annotation with <code>@ParameterizedTest</code> methods. JUnit 5 provides <code>@ParameterizedTest</code> support via the <code>junit-jupiter-params</code> dependency.</p> <p>Once you have the dependency on the classpath, you can declare a test method as follows:</p> Parameterized test with a single argument<pre><code>@ExtendWith(InstancioExtension.class)\nclass PersonToPersonDTOTest {\n\n    @ParameterizedTest\n    @InstancioSource\n    void singleArgument(Person person) {\n        // provides a fully-populated person as an argument\n    }\n}\n</code></pre> <p>Instancio will provide a populated instance of the class specified in the annotation. You can specify as many parameters as you need:</p> Parameterized test with multiple arguments<pre><code>@ParameterizedTest\n@InstancioSource\nvoid multipleArguments(String str, UUID uuid, Foo foo) {\n    // any number of arguments can be specified...\n}\n</code></pre> <p>There are a couple of important limitations to using @InstancioSource to be aware of.</p> <p>For example, you cannot customise the object as you would with the builder API. In other words, there is no way to specify something like this:</p> <pre><code>Person person = Instancio.of(Person.class)\n    .set(field(Phone.class, \"countryCode\"), \"+1\")\n    .set(all(LocalDateTime.class), LocalDateTime.now())\n\u00a0 \u00a0 .create();\n</code></pre> <p>However, in situations where these limitations do not apply, it offers a convenient way of providing data to a test method. From simple values such as Strings and numbers to complex data types.</p>"}]}