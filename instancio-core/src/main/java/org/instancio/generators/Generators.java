/*
 * Copyright 2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.instancio.generators;

import org.instancio.generator.GeneratorContext;
import org.instancio.generator.specs.ArrayGeneratorSpec;
import org.instancio.generator.specs.BooleanGeneratorSpec;
import org.instancio.generator.specs.CollectionGeneratorSpec;
import org.instancio.generator.specs.EnumGeneratorSpec;
import org.instancio.generator.specs.EnumSetGeneratorSpec;
import org.instancio.generator.specs.MapGeneratorSpec;
import org.instancio.generator.specs.NumberGeneratorSpec;
import org.instancio.generator.specs.OneOfArrayGeneratorSpec;
import org.instancio.generator.specs.OneOfCollectionGeneratorSpec;
import org.instancio.generator.specs.StringGeneratorSpec;
import org.instancio.internal.generator.array.ArrayGenerator;
import org.instancio.internal.generator.array.OneOfArrayGenerator;
import org.instancio.internal.generator.lang.BooleanGenerator;
import org.instancio.internal.generator.lang.ByteGenerator;
import org.instancio.internal.generator.lang.CharacterGenerator;
import org.instancio.internal.generator.lang.DoubleGenerator;
import org.instancio.internal.generator.lang.EnumGenerator;
import org.instancio.internal.generator.lang.FloatGenerator;
import org.instancio.internal.generator.lang.IntegerGenerator;
import org.instancio.internal.generator.lang.LongGenerator;
import org.instancio.internal.generator.lang.ShortGenerator;
import org.instancio.internal.generator.lang.StringGenerator;
import org.instancio.internal.generator.util.CollectionGeneratorSpecImpl;
import org.instancio.internal.generator.util.EnumSetGenerator;
import org.instancio.internal.generator.util.MapGeneratorSpecImpl;
import org.instancio.internal.generator.util.OneOfCollectionGenerator;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * This class provides access to built-in generators.
 * <p>
 * It can be used to customise random values generated by built-in generators.
 * This includes numeric, collection sizes, string lengths, etc.
 *
 * @since 1.0.1
 */
@SuppressWarnings({"PMD.CouplingBetweenObjects", "PMD.ExcessiveImports"})
public class Generators {

    private static final Map<Class<?>, String> API_METHODS = Collections.unmodifiableMap(getApiMethods());

    private final GeneratorContext context;

    public Generators(final GeneratorContext context) {
        this.context = context;
    }

    /**
     * Returns the public API method for the given generator spec class.
     *
     * @param generatorSpec whose API method to return
     * @return the public API method, for example {@code array()} for the array generator
     */
    public static String getApiMethod(final Class<?> generatorSpec) {
        return API_METHODS.get(generatorSpec);
    }

    private static Map<Class<?>, String> getApiMethods() {
        final Map<Class<?>, String> map = new HashMap<>();
        map.put(ByteGenerator.class, "bytes()");
        map.put(ShortGenerator.class, "shorts()");
        map.put(IntegerGenerator.class, "ints()");
        map.put(LongGenerator.class, "longs()");
        map.put(FloatGenerator.class, "floats()");
        map.put(DoubleGenerator.class, "doubles()");
        map.put(CharacterGenerator.class, "chars()");
        map.put(BooleanGenerator.class, "booleans()");
        map.put(StringGenerator.class, "string()");
        map.put(EnumGenerator.class, "enumOf()");
        map.put(ArrayGenerator.class, "array()");
        map.put(CollectionGeneratorSpecImpl.class, "collection()");
        map.put(MapGeneratorSpecImpl.class, "map()");
        map.putAll(AtomicGenerators.getApiMethods());
        map.putAll(MathGenerators.getApiMethods());
        map.putAll(TemporalGenerators.getApiMethods());
        map.putAll(TextGenerators.getApiMethods());
        return map;
    }

    /**
     * Customises generated {@link String} values.
     *
     * @return customised generator
     */
    public StringGeneratorSpec string() {
        return new StringGenerator(context);
    }

    /**
     * Customises generated {@link boolean} values.
     *
     * @return customised generator
     * @since 2.0.0
     */
    public BooleanGeneratorSpec booleans() {
        return new BooleanGenerator(context);
    }

    /**
     * Customises generated {@link Byte} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Byte> bytes() {
        return new ByteGenerator(context);
    }

    /**
     * Customises generated {@link Short} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Short> shorts() {
        return new ShortGenerator(context);
    }

    /**
     * Customises generated {@link Integer} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Integer> ints() {
        return new IntegerGenerator(context);
    }

    /**
     * Customises generated {@link Long} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Long> longs() {
        return new LongGenerator(context);
    }

    /**
     * Customises generated {@link Float} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Float> floats() {
        return new FloatGenerator(context);
    }

    /**
     * Customises generated {@link Double} values.
     *
     * @return customised generator
     */
    public NumberGeneratorSpec<Double> doubles() {
        return new DoubleGenerator(context);
    }

    /**
     * Customises generated enum values.
     *
     * @param enumClass type of enum to generate
     * @param <E>       enum type
     * @return customised generator
     */
    public <E extends Enum<E>> EnumGeneratorSpec<E> enumOf(final Class<E> enumClass) {
        return new EnumGenerator<>(enumClass);
    }

    /**
     * Return generators for {@code java.math} classes.
     *
     * @return built-in generators for {@code java.math} classes.
     */
    public MathGenerators math() {
        return new MathGenerators(context);
    }

    /**
     * Picks a random value from the given choices.
     *
     * @param choices to choose from
     * @param <T>     element type
     * @return generator for making a selection
     */
    @SafeVarargs
    public final <T> OneOfArrayGeneratorSpec<T> oneOf(T... choices) {
        return new OneOfArrayGenerator<T>(context).oneOf(choices);
    }

    /**
     * Picks a random value from the given choices.
     *
     * @param choices to choose from
     * @param <T>     element type
     * @return generator for making a selection
     */
    public final <T> OneOfCollectionGeneratorSpec<T> oneOf(Collection<T> choices) {
        return new OneOfCollectionGenerator<T>(context).oneOf(choices);
    }

    /**
     * Customises generated arrays.
     *
     * @param <T> array component type
     * @return customised generator
     */
    public <T> ArrayGeneratorSpec<T> array() {
        return new ArrayGenerator<>(context);
    }

    /**
     * Customises generated collections.
     *
     * @param <T> element type
     * @return customised generator
     */
    public <T> CollectionGeneratorSpec<T> collection() {
        return new CollectionGeneratorSpecImpl<>(context);
    }

    /**
     * Customises generated {@link java.util.EnumSet}.
     *
     * @param enumClass contained by the generated enum set
     * @param <E>       enum type
     * @return customised generator
     * @since 2.0.0
     */
    public <E extends Enum<E>> EnumSetGeneratorSpec<E> enumSet(final Class<E> enumClass) {
        return new EnumSetGenerator<>(context, enumClass);
    }

    /**
     * Customises generated maps.
     *
     * @param <K> key type
     * @param <V> value type
     * @return customised generator
     */
    public <K, V> MapGeneratorSpec<K, V> map() {
        return new MapGeneratorSpecImpl<>(context);
    }

    /**
     * Provides access to atomic generators.
     *
     * @return built-in atomic generators
     */
    public AtomicGenerators atomic() {
        return new AtomicGenerators(context);
    }

    /**
     * Provides access to temporal generators.
     *
     * @return built-in temporal generators
     */
    public TemporalGenerators temporal() {
        return new TemporalGenerators(context);
    }

    /**
     * Provides access to text generators.
     *
     * @return built-in text generators
     */
    public TextGenerators text() {
        return new TextGenerators(context);
    }
}
