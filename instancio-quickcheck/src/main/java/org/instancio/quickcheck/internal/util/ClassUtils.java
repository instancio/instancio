/*
 * Copyright 2022-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.instancio.quickcheck.internal.util;

import java.util.Objects;
import java.util.function.Function;

import static java.util.Arrays.stream;
import static java.util.stream.Collectors.joining;

/**
 * This class is from the
 * <a href="https://github.com/junit-team/junit5/">JUnit Jupiter</a> library.
 *
 * <p>This is a modified version of
 * {@code org.junit.platform.commons.util.ClassUtils}.
 */
public final class ClassUtils {

    private ClassUtils() {
        /* no-op */
    }

    /**
     * Generate a comma-separated list of fully qualified class names for the
     * supplied classes.
     *
     * @param classes the classes whose names should be included in the
     *                generated string
     * @return a comma-separated list of fully qualified class names, or an empty
     * string if the supplied class array is {@code null} or empty
     * @see #nullSafeToString(Function, Class...)
     */
    public static String nullSafeToString(Class<?>... classes) {
        return nullSafeToString(Class::getName, classes);
    }

    /**
     * Generate a comma-separated list of mapped values for the supplied classes.
     *
     * <p>The values are generated by the supplied {@code mapper}
     * (e.g., {@code Class::getName}, {@code Class::getSimpleName}, etc.), unless
     * a class reference is {@code null} in which case it will be mapped to
     * {@code "null"}.
     *
     * @param mapper  the mapper to use; never {@code null}
     * @param classes the classes to map
     * @return a comma-separated list of mapped values, or an empty string if
     * the supplied class array is {@code null} or empty
     * @see #nullSafeToString(Class...)
     */
    public static String nullSafeToString(Function<? super Class<?>, String> mapper, Class<?>... classes) {
        Objects.requireNonNull(mapper, "Mapping function must not be null");

        if (classes == null || classes.length == 0) {
            return "";
        }
        return stream(classes).map(clazz -> clazz == null ? "null" : mapper.apply(clazz)).collect(joining(", "));
    }

}
